"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-tagfilter";
exports.ids = ["vendor-chunks/micromark-extension-gfm-tagfilter"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-tagfilter/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-tagfilter/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   gfmTagfilterHtml: () => (/* binding */ gfmTagfilterHtml)\n/* harmony export */ });\n/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */ // An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow = /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi;\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp(\"^\" + reFlow.source, \"i\");\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions`, to\n * support GitHub’s weird and useless tagfilter when serializing to HTML.\n *\n * @type {HtmlExtension}\n */ const gfmTagfilterHtml = {\n    exit: {\n        htmlFlowData (token) {\n            exitHtmlData.call(this, token, reFlow);\n        },\n        htmlTextData (token) {\n            exitHtmlData.call(this, token, reText);\n        }\n    }\n};\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n */ function exitHtmlData(token, filter) {\n    let value = this.sliceSerialize(token);\n    if (this.options.allowDangerousHtml) {\n        value = value.replace(filter, \"&lt;$1$2\");\n    }\n    this.raw(this.encode(value));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFnZmlsdGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7OztDQUlDLEdBRUQscUZBQXFGO0FBQ3JGLDJEQUEyRDtBQUMzRCxNQUFNQSxTQUNKO0FBRUYsaUZBQWlGO0FBQ2pGLFVBQVU7QUFDVixNQUFNQyxTQUFTLElBQUlDLE9BQU8sTUFBTUYsT0FBT0csTUFBTSxFQUFFO0FBRS9DOzs7OztDQUtDLEdBQ00sTUFBTUMsbUJBQW1CO0lBQzlCQyxNQUFNO1FBQ0pDLGNBQWFDLEtBQUs7WUFDaEJDLGFBQWFDLElBQUksQ0FBQyxJQUFJLEVBQUVGLE9BQU9QO1FBQ2pDO1FBQ0FVLGNBQWFILEtBQUs7WUFDaEJDLGFBQWFDLElBQUksQ0FBQyxJQUFJLEVBQUVGLE9BQU9OO1FBQ2pDO0lBQ0Y7QUFDRixFQUFDO0FBRUQ7Ozs7Q0FJQyxHQUNELFNBQVNPLGFBQWFELEtBQUssRUFBRUksTUFBTTtJQUNqQyxJQUFJQyxRQUFRLElBQUksQ0FBQ0MsY0FBYyxDQUFDTjtJQUVoQyxJQUFJLElBQUksQ0FBQ08sT0FBTyxDQUFDQyxrQkFBa0IsRUFBRTtRQUNuQ0gsUUFBUUEsTUFBTUksT0FBTyxDQUFDTCxRQUFRO0lBQ2hDO0lBRUEsSUFBSSxDQUFDTSxHQUFHLENBQUMsSUFBSSxDQUFDQyxNQUFNLENBQUNOO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdjAgY2xvbmUgd2l0aCBjb3BpbG90a2l0LCBuZXh0LmpzLCBhbmQgb3BlbmFpIGdwdDQvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tdGFnZmlsdGVyL2luZGV4LmpzPzRlYWMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLkNvbXBpbGVDb250ZXh0fSBDb21waWxlQ29udGV4dFxuICogQHR5cGVkZWYge2ltcG9ydCgnbWljcm9tYXJrLXV0aWwtdHlwZXMnKS5IdG1sRXh0ZW5zaW9ufSBIdG1sRXh0ZW5zaW9uXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdtaWNyb21hcmstdXRpbC10eXBlcycpLlRva2VufSBUb2tlblxuICovXG5cbi8vIEFuIG9wZW5pbmcgb3IgY2xvc2luZyB0YWcgc3RhcnQsIGZvbGxvd2VkIGJ5IGEgY2FzZS1pbnNlbnNpdGl2ZSBzcGVjaWZpYyB0YWcgbmFtZSxcbi8vIGZvbGxvd2VkIGJ5IEhUTUwgd2hpdGVzcGFjZSwgYSBncmVhdGVyIHRoYW4sIG9yIGEgc2xhc2guXG5jb25zdCByZUZsb3cgPVxuICAvPChcXC8/KShpZnJhbWV8bm9lbWJlZHxub2ZyYW1lc3xwbGFpbnRleHR8c2NyaXB0fHN0eWxlfHRpdGxlfHRleHRhcmVhfHhtcCkoPz1bXFx0XFxuXFxmXFxyIC8+XSkvZ2lcblxuLy8gQXMgSFRNTCAodGV4dCkgcGFyc2VzIHRhZ3Mgc2VwYXJhdGVseSAoYW5kIHZlcnkgc3RyaWN0bHkpLCB3ZSBkb27igJl0IG5lZWQgdG8gYmVcbi8vIGdsb2JhbC5cbmNvbnN0IHJlVGV4dCA9IG5ldyBSZWdFeHAoJ14nICsgcmVGbG93LnNvdXJjZSwgJ2knKVxuXG4vKipcbiAqIEV4dGVuc2lvbiBmb3IgYG1pY3JvbWFya2AgdGhhdCBjYW4gYmUgcGFzc2VkIGluIGBodG1sRXh0ZW5zaW9uc2AsIHRvXG4gKiBzdXBwb3J0IEdpdEh1YuKAmXMgd2VpcmQgYW5kIHVzZWxlc3MgdGFnZmlsdGVyIHdoZW4gc2VyaWFsaXppbmcgdG8gSFRNTC5cbiAqXG4gKiBAdHlwZSB7SHRtbEV4dGVuc2lvbn1cbiAqL1xuZXhwb3J0IGNvbnN0IGdmbVRhZ2ZpbHRlckh0bWwgPSB7XG4gIGV4aXQ6IHtcbiAgICBodG1sRmxvd0RhdGEodG9rZW4pIHtcbiAgICAgIGV4aXRIdG1sRGF0YS5jYWxsKHRoaXMsIHRva2VuLCByZUZsb3cpXG4gICAgfSxcbiAgICBodG1sVGV4dERhdGEodG9rZW4pIHtcbiAgICAgIGV4aXRIdG1sRGF0YS5jYWxsKHRoaXMsIHRva2VuLCByZVRleHQpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQHRoaXMge0NvbXBpbGVDb250ZXh0fVxuICogQHBhcmFtIHtUb2tlbn0gdG9rZW5cbiAqIEBwYXJhbSB7UmVnRXhwfSBmaWx0ZXJcbiAqL1xuZnVuY3Rpb24gZXhpdEh0bWxEYXRhKHRva2VuLCBmaWx0ZXIpIHtcbiAgbGV0IHZhbHVlID0gdGhpcy5zbGljZVNlcmlhbGl6ZSh0b2tlbilcblxuICBpZiAodGhpcy5vcHRpb25zLmFsbG93RGFuZ2Vyb3VzSHRtbCkge1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShmaWx0ZXIsICcmbHQ7JDEkMicpXG4gIH1cblxuICB0aGlzLnJhdyh0aGlzLmVuY29kZSh2YWx1ZSkpXG59XG4iXSwibmFtZXMiOlsicmVGbG93IiwicmVUZXh0IiwiUmVnRXhwIiwic291cmNlIiwiZ2ZtVGFnZmlsdGVySHRtbCIsImV4aXQiLCJodG1sRmxvd0RhdGEiLCJ0b2tlbiIsImV4aXRIdG1sRGF0YSIsImNhbGwiLCJodG1sVGV4dERhdGEiLCJmaWx0ZXIiLCJ2YWx1ZSIsInNsaWNlU2VyaWFsaXplIiwib3B0aW9ucyIsImFsbG93RGFuZ2Vyb3VzSHRtbCIsInJlcGxhY2UiLCJyYXciLCJlbmNvZGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-tagfilter/index.js\n");

/***/ })

};
;