"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@copilotkit";
exports.ids = ["vendor-chunks/@copilotkit"];
exports.modules = {

/***/ "(ssr)/./node_modules/@copilotkit/react-core/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/dist/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/index.tsx\nvar src_exports = {};\n__export(src_exports, {\n    CopilotContext: ()=>CopilotContext,\n    CopilotKit: ()=>CopilotKit,\n    CopilotTask: ()=>CopilotTask,\n    defaultCopilotContextCategories: ()=>defaultCopilotContextCategories,\n    fetchAndDecodeChatCompletion: ()=>fetchAndDecodeChatCompletion,\n    fetchAndDecodeChatCompletionAsText: ()=>fetchAndDecodeChatCompletionAsText,\n    fetchChatCompletion: ()=>fetchChatCompletion,\n    processMessageStream: ()=>processMessageStream,\n    useCopilotAction: ()=>useCopilotAction,\n    useCopilotChat: ()=>useCopilotChat,\n    useCopilotChatV2: ()=>useCopilotChatV2,\n    useCopilotContext: ()=>useCopilotContext,\n    useMakeCopilotActionable: ()=>useMakeCopilotActionable,\n    useMakeCopilotDocumentReadable: ()=>useMakeCopilotDocumentReadable,\n    useMakeCopilotReadable: ()=>useMakeCopilotReadable\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/components/copilot-provider/copilotkit.tsx\nvar import_react4 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n// src/context/copilot-context.tsx\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar emptyCopilotContext = {\n    entryPoints: {},\n    setEntryPoint: ()=>{},\n    removeEntryPoint: ()=>{},\n    getChatCompletionFunctionDescriptions: ()=>returnAndThrowInDebug([]),\n    getFunctionCallHandler: ()=>returnAndThrowInDebug(()=>__async(void 0, null, function*() {})),\n    chatComponentsCache: {\n        current: {}\n    },\n    getContextString: (documents, categories)=>returnAndThrowInDebug(\"\"),\n    addContext: ()=>\"\",\n    removeContext: ()=>{},\n    getDocumentsContext: (categories)=>returnAndThrowInDebug([]),\n    addDocumentContext: ()=>returnAndThrowInDebug(\"\"),\n    removeDocumentContext: ()=>{},\n    copilotApiConfig: new class {\n        get chatApiEndpoint() {\n            throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n        }\n        get chatApiEndpointV2() {\n            throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n        }\n        get headers() {\n            return {};\n        }\n        get body() {\n            return {};\n        }\n    }()\n};\nvar CopilotContext = import_react.default.createContext(emptyCopilotContext);\nfunction useCopilotContext() {\n    return import_react.default.useContext(CopilotContext);\n}\nfunction returnAndThrowInDebug(value) {\n    throw new Error(\"Remember to wrap your app in a `<CopilotKit> {...} </CopilotKit>` !!!\");\n    return value;\n}\n// src/hooks/use-tree.ts\nvar import_nanoid = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\");\nvar import_react2 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar removeNode = (nodes, id)=>{\n    return nodes.reduce((result, node)=>{\n        if (node.id !== id) {\n            const newNode = __spreadProps(__spreadValues({}, node), {\n                children: removeNode(node.children, id)\n            });\n            result.push(newNode);\n        }\n        return result;\n    }, []);\n};\nvar addNode = (nodes, newNode, parentId)=>{\n    if (!parentId) {\n        return [\n            ...nodes,\n            newNode\n        ];\n    }\n    return nodes.map((node)=>{\n        if (node.id === parentId) {\n            return __spreadProps(__spreadValues({}, node), {\n                children: [\n                    ...node.children,\n                    newNode\n                ]\n            });\n        } else if (node.children.length) {\n            return __spreadProps(__spreadValues({}, node), {\n                children: addNode(node.children, newNode, parentId)\n            });\n        }\n        return node;\n    });\n};\nvar treeIndentationRepresentation = (index, indentLevel)=>{\n    if (indentLevel === 0) {\n        return (index + 1).toString();\n    } else if (indentLevel === 1) {\n        return String.fromCharCode(65 + index);\n    } else if (indentLevel === 2) {\n        return String.fromCharCode(97 + index);\n    } else {\n        return \"-\";\n    }\n};\nvar printNode = (node, prefix = \"\", indentLevel = 0)=>{\n    const indent = \" \".repeat(3).repeat(indentLevel);\n    const prefixPlusIndentLength = prefix.length + indent.length;\n    const subsequentLinesPrefix = \" \".repeat(prefixPlusIndentLength);\n    const valueLines = node.value.split(\"\\n\");\n    const outputFirstLine = `${indent}${prefix}${valueLines[0]}`;\n    const outputSubsequentLines = valueLines.slice(1).map((line)=>`${subsequentLinesPrefix}${line}`).join(\"\\n\");\n    let output = `${outputFirstLine}\n`;\n    if (outputSubsequentLines) {\n        output += `${outputSubsequentLines}\n`;\n    }\n    const childPrePrefix = \" \".repeat(prefix.length);\n    node.children.forEach((child, index)=>output += printNode(child, `${childPrePrefix}${treeIndentationRepresentation(index, indentLevel + 1)}. `, indentLevel + 1));\n    return output;\n};\nfunction treeReducer(state, action) {\n    switch(action.type){\n        case \"ADD_NODE\":\n            {\n                const { value, parentId, id: newNodeId } = action;\n                const newNode = {\n                    id: newNodeId,\n                    value,\n                    children: [],\n                    categories: new Set(action.categories)\n                };\n                try {\n                    return addNode(state, newNode, parentId);\n                } catch (error) {\n                    console.error(`Error while adding node with id ${newNodeId}: ${error}`);\n                    return state;\n                }\n            }\n        case \"REMOVE_NODE\":\n            return removeNode(state, action.id);\n        default:\n            return state;\n    }\n}\nvar useTree = ()=>{\n    const [tree, dispatch] = (0, import_react2.useReducer)(treeReducer, []);\n    const addElement = (0, import_react2.useCallback)((value, categories, parentId)=>{\n        const newNodeId = (0, import_nanoid.nanoid)();\n        dispatch({\n            type: \"ADD_NODE\",\n            value,\n            parentId,\n            id: newNodeId,\n            categories\n        });\n        return newNodeId;\n    }, []);\n    const removeElement = (0, import_react2.useCallback)((id)=>{\n        dispatch({\n            type: \"REMOVE_NODE\",\n            id\n        });\n    }, []);\n    const printTree = (0, import_react2.useCallback)((categories)=>{\n        const categoriesSet = new Set(categories);\n        let output = \"\";\n        tree.forEach((node, index)=>{\n            if (!setsHaveIntersection(categoriesSet, node.categories)) {\n                return;\n            }\n            if (index !== 0) {\n                output += \"\\n\";\n            }\n            output += printNode(node, `${treeIndentationRepresentation(index, 0)}. `);\n        });\n        return output;\n    }, [\n        tree\n    ]);\n    return {\n        tree,\n        addElement,\n        printTree,\n        removeElement\n    };\n};\nvar use_tree_default = useTree;\nfunction setsHaveIntersection(setA, setB) {\n    const [smallerSet, largerSet] = setA.size <= setB.size ? [\n        setA,\n        setB\n    ] : [\n        setB,\n        setA\n    ];\n    for (let item of smallerSet){\n        if (largerSet.has(item)) {\n            return true;\n        }\n    }\n    return false;\n}\n// src/components/copilot-provider/copilotkit.tsx\nvar import_shared = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\n// src/hooks/use-flat-category-store.ts\nvar import_nanoid2 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\");\nvar import_react3 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar useFlatCategoryStore = ()=>{\n    const [elements, dispatch] = (0, import_react3.useReducer)(flatCategoryStoreReducer, /* @__PURE__ */ new Map());\n    const addElement = (0, import_react3.useCallback)((value, categories)=>{\n        const newId = (0, import_nanoid2.nanoid)();\n        dispatch({\n            type: \"ADD_ELEMENT\",\n            value,\n            id: newId,\n            categories\n        });\n        return newId;\n    }, []);\n    const removeElement = (0, import_react3.useCallback)((id)=>{\n        dispatch({\n            type: \"REMOVE_ELEMENT\",\n            id\n        });\n    }, []);\n    const allElements = (0, import_react3.useCallback)((categories)=>{\n        const categoriesSet = new Set(categories);\n        const result = [];\n        elements.forEach((element)=>{\n            if (setsHaveIntersection2(categoriesSet, element.categories)) {\n                result.push(element.value);\n            }\n        });\n        return result;\n    }, [\n        elements\n    ]);\n    return {\n        addElement,\n        removeElement,\n        allElements\n    };\n};\nvar use_flat_category_store_default = useFlatCategoryStore;\nfunction flatCategoryStoreReducer(state, action) {\n    switch(action.type){\n        case \"ADD_ELEMENT\":\n            {\n                const { value, id, categories } = action;\n                const newElement = {\n                    id,\n                    value,\n                    categories: new Set(categories)\n                };\n                const newState = new Map(state);\n                newState.set(id, newElement);\n                return newState;\n            }\n        case \"REMOVE_ELEMENT\":\n            {\n                const newState = new Map(state);\n                newState.delete(action.id);\n                return newState;\n            }\n        default:\n            return state;\n    }\n}\nfunction setsHaveIntersection2(setA, setB) {\n    const [smallerSet, largerSet] = setA.size <= setB.size ? [\n        setA,\n        setB\n    ] : [\n        setB,\n        setA\n    ];\n    for (let item of smallerSet){\n        if (largerSet.has(item)) {\n            return true;\n        }\n    }\n    return false;\n}\n// src/components/copilot-provider/standard-copilot-api-config.tsx\nvar StandardCopilotApiConfig = class {\n    constructor(chatApiEndpoint, chatApiEndpointV2, headers, body){\n        this.chatApiEndpoint = chatApiEndpoint;\n        this.chatApiEndpointV2 = chatApiEndpointV2;\n        this.headers = headers;\n        this.body = body;\n    }\n};\n// src/components/copilot-provider/copilotkit.tsx\nvar import_jsx_runtime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nfunction CopilotKit(_a) {\n    var _b = _a, { children } = _b, props = __objRest(_b, [\n        \"children\"\n    ]);\n    const [entryPoints, setEntryPoints] = (0, import_react4.useState)({});\n    const chatComponentsCache = (0, import_react4.useRef)({});\n    const { addElement, removeElement, printTree } = use_tree_default();\n    const { addElement: addDocument, removeElement: removeDocument, allElements: allDocuments } = use_flat_category_store_default();\n    const setEntryPoint = (0, import_react4.useCallback)((id, entryPoint)=>{\n        setEntryPoints((prevPoints)=>{\n            return __spreadProps(__spreadValues({}, prevPoints), {\n                [id]: entryPoint\n            });\n        });\n    }, []);\n    const removeEntryPoint = (0, import_react4.useCallback)((id)=>{\n        setEntryPoints((prevPoints)=>{\n            const newPoints = __spreadValues({}, prevPoints);\n            delete newPoints[id];\n            return newPoints;\n        });\n    }, []);\n    const getContextString = (0, import_react4.useCallback)((documents, categories)=>{\n        const documentsString = documents.map((document)=>{\n            return `${document.name} (${document.sourceApplication}):\n${document.getContents()}`;\n        }).join(\"\\n\\n\");\n        const nonDocumentStrings = printTree(categories);\n        return `${documentsString}\n\n${nonDocumentStrings}`;\n    }, [\n        printTree\n    ]);\n    const addContext = (0, import_react4.useCallback)((context, parentId, categories = defaultCopilotContextCategories)=>{\n        return addElement(context, categories, parentId);\n    }, [\n        addElement\n    ]);\n    const removeContext = (0, import_react4.useCallback)((id)=>{\n        removeElement(id);\n    }, [\n        removeElement\n    ]);\n    const getChatCompletionFunctionDescriptions = (0, import_react4.useCallback)((customEntryPoints)=>{\n        return entryPointsToChatCompletionFunctions(Object.values(customEntryPoints || entryPoints));\n    }, [\n        entryPoints\n    ]);\n    const getFunctionCallHandler = (0, import_react4.useCallback)((customEntryPoints)=>{\n        return entryPointsToFunctionCallHandler(Object.values(customEntryPoints || entryPoints));\n    }, [\n        entryPoints\n    ]);\n    const getDocumentsContext = (0, import_react4.useCallback)((categories)=>{\n        return allDocuments(categories);\n    }, [\n        allDocuments\n    ]);\n    const addDocumentContext = (0, import_react4.useCallback)((documentPointer, categories = defaultCopilotContextCategories)=>{\n        return addDocument(documentPointer, categories);\n    }, [\n        addDocument\n    ]);\n    const removeDocumentContext = (0, import_react4.useCallback)((documentId)=>{\n        removeDocument(documentId);\n    }, [\n        removeDocument\n    ]);\n    const copilotApiConfig = new StandardCopilotApiConfig(props.url, `${props.url}/v2`, props.headers || {}, __spreadValues(__spreadValues({}, props.body), props.backendOnlyProps));\n    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CopilotContext.Provider, {\n        value: {\n            entryPoints,\n            chatComponentsCache,\n            getChatCompletionFunctionDescriptions,\n            getFunctionCallHandler,\n            setEntryPoint,\n            removeEntryPoint,\n            getContextString,\n            addContext,\n            removeContext,\n            getDocumentsContext,\n            addDocumentContext,\n            removeDocumentContext,\n            copilotApiConfig\n        },\n        children\n    });\n}\nvar defaultCopilotContextCategories = [\n    \"global\"\n];\nfunction entryPointsToChatCompletionFunctions(actions) {\n    return actions.map(import_shared.actionToChatCompletionFunction);\n}\nfunction entryPointsToFunctionCallHandler(actions) {\n    return (chatMessages, functionCall)=>__async(this, null, function*() {\n            let actionsByFunctionName = {};\n            for (let action2 of actions){\n                actionsByFunctionName[action2.name] = action2;\n            }\n            const action = actionsByFunctionName[functionCall.name || \"\"];\n            if (action) {\n                let functionCallArguments = [];\n                if (functionCall.arguments) {\n                    functionCallArguments = JSON.parse(functionCall.arguments);\n                }\n                return yield action.handler(functionCallArguments);\n            }\n        });\n}\n// src/hooks/use-copilot-chat.ts\nvar import_react6 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n// src/hooks/use-chat.ts\nvar import_react5 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_shared3 = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\nvar import_nanoid3 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\");\n// src/utils/fetch-chat-completion.ts\nvar import_shared2 = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\nfunction fetchChatCompletion(_0) {\n    return __async(this, arguments, function*({ copilotConfig, model, messages, tools, temperature, headers, body, signal }) {\n        temperature || (temperature = 0.5);\n        tools || (tools = []);\n        const cleanedMessages = messages.map((message)=>{\n            const { content, role, name, function_call } = message;\n            return {\n                content,\n                role,\n                name,\n                function_call\n            };\n        });\n        const response = yield fetch(copilotConfig.chatApiEndpoint, {\n            method: \"POST\",\n            headers: __spreadValues(__spreadValues({\n                \"Content-Type\": \"application/json\"\n            }, copilotConfig.headers), headers ? __spreadValues({}, headers) : {}),\n            body: JSON.stringify(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({\n                model,\n                messages: cleanedMessages,\n                stream: true\n            }, tools.length ? {\n                tools\n            } : {}), temperature ? {\n                temperature\n            } : {}), tools.length != 0 ? {\n                tool_choice: \"auto\"\n            } : {}), copilotConfig.body), copilotConfig.backendOnlyProps), excludeBackendOnlyProps(copilotConfig)), body ? __spreadValues({}, body) : {})),\n            signal\n        });\n        return response;\n    });\n}\nfunction excludeBackendOnlyProps(copilotConfig) {\n    var _a;\n    const backendOnlyProps = (_a = copilotConfig.backendOnlyProps) != null ? _a : {};\n    if (Object.keys(backendOnlyProps).length > 0) {\n        return {\n            [import_shared2.EXCLUDE_FROM_FORWARD_PROPS_KEYS]: Object.keys(backendOnlyProps)\n        };\n    } else {\n        return {};\n    }\n}\nfunction fetchAndDecodeChatCompletion(params) {\n    return __async(this, null, function*() {\n        const response = yield fetchChatCompletion(params);\n        if (!response.ok || !response.body) {\n            response.events = null;\n        } else {\n            const events = yield (0, import_shared2.decodeChatCompletion)((0, import_shared2.parseChatCompletion)(response.body));\n            response.events = events;\n        }\n        return response;\n    });\n}\nfunction fetchAndDecodeChatCompletionAsText(params) {\n    return __async(this, null, function*() {\n        const response = yield fetchChatCompletion(params);\n        if (!response.ok || !response.body) {\n            response.events = null;\n        } else {\n            const events = yield (0, import_shared2.decodeChatCompletionAsText)((0, import_shared2.decodeChatCompletion)((0, import_shared2.parseChatCompletion)(response.body)));\n            response.events = events;\n        }\n        return response;\n    });\n}\n// src/hooks/use-chat.ts\nvar import_untruncate_json = __toESM(__webpack_require__(/*! untruncate-json */ \"(ssr)/./node_modules/untruncate-json/dist/esm/index.js\"));\nfunction useChat(options) {\n    const [messages, setMessages] = (0, import_react5.useState)([]);\n    const [input, setInput] = (0, import_react5.useState)(\"\");\n    const [isLoading, setIsLoading] = (0, import_react5.useState)(false);\n    const abortControllerRef = (0, import_react5.useRef)();\n    const threadIdRef = (0, import_react5.useRef)(null);\n    const runIdRef = (0, import_react5.useRef)(null);\n    const runChatCompletion = (messages2)=>__async(this, null, function*() {\n            setIsLoading(true);\n            const newMessages = [\n                {\n                    id: (0, import_nanoid3.nanoid)(),\n                    createdAt: /* @__PURE__ */ new Date(),\n                    content: \"\",\n                    role: \"assistant\"\n                }\n            ];\n            const abortController = new AbortController();\n            abortControllerRef.current = abortController;\n            setMessages([\n                ...messages2,\n                ...newMessages\n            ]);\n            const copilotConfigBody = options.copilotConfig.body || {};\n            if (threadIdRef.current) {\n                copilotConfigBody.threadId = threadIdRef.current;\n            }\n            if (runIdRef.current) {\n                copilotConfigBody.runId = runIdRef.current;\n            }\n            const messagesWithContext = [\n                ...options.initialMessages || [],\n                ...messages2\n            ];\n            const response = yield fetchAndDecodeChatCompletion({\n                copilotConfig: __spreadProps(__spreadValues({}, options.copilotConfig), {\n                    body: copilotConfigBody\n                }),\n                messages: messagesWithContext,\n                tools: options.tools,\n                headers: options.headers,\n                signal: abortController.signal\n            });\n            if (response.headers.get(\"threadid\")) {\n                threadIdRef.current = response.headers.get(\"threadid\");\n            }\n            if (response.headers.get(\"runid\")) {\n                runIdRef.current = response.headers.get(\"runid\");\n            }\n            if (!response.events) {\n                throw new Error(\"Failed to fetch chat completion\");\n            }\n            const reader = response.events.getReader();\n            let feedback = false;\n            try {\n                while(true){\n                    const { done, value } = yield reader.read();\n                    if (done) {\n                        break;\n                    }\n                    let currentMessage = Object.assign({}, newMessages[newMessages.length - 1]);\n                    if (value.type === \"content\") {\n                        if (currentMessage.function_call || currentMessage.role === \"function\") {\n                            currentMessage = {\n                                id: (0, import_nanoid3.nanoid)(),\n                                createdAt: /* @__PURE__ */ new Date(),\n                                content: \"\",\n                                role: \"assistant\"\n                            };\n                            newMessages.push(currentMessage);\n                        }\n                        currentMessage.content += value.content;\n                        newMessages[newMessages.length - 1] = currentMessage;\n                        setMessages([\n                            ...messages2,\n                            ...newMessages\n                        ]);\n                    } else if (value.type === \"result\") {\n                        currentMessage = {\n                            id: (0, import_nanoid3.nanoid)(),\n                            role: \"function\",\n                            content: value.content,\n                            name: value.name\n                        };\n                        newMessages.push(currentMessage);\n                        setMessages([\n                            ...messages2,\n                            ...newMessages\n                        ]);\n                        feedback = true;\n                    } else if (value.type === \"function\" || value.type === \"partial\") {\n                        if (currentMessage.content != \"\" || currentMessage.function_call || currentMessage.role == \"function\") {\n                            currentMessage = {\n                                id: (0, import_nanoid3.nanoid)(),\n                                createdAt: /* @__PURE__ */ new Date(),\n                                content: \"\",\n                                role: \"assistant\"\n                            };\n                            newMessages.push(currentMessage);\n                        }\n                        if (value.type === \"function\") {\n                            currentMessage.function_call = {\n                                name: value.name,\n                                arguments: JSON.stringify(value.arguments),\n                                scope: value.scope\n                            };\n                        } else if (value.type === \"partial\") {\n                            let partialArguments = {};\n                            try {\n                                partialArguments = JSON.parse((0, import_untruncate_json.default)(value.arguments));\n                            } catch (e) {}\n                            currentMessage.partialFunctionCall = {\n                                name: value.name,\n                                arguments: partialArguments\n                            };\n                        }\n                        newMessages[newMessages.length - 1] = currentMessage;\n                        setMessages([\n                            ...messages2,\n                            ...newMessages\n                        ]);\n                        if (value.type === \"function\") {\n                            try {\n                                if (options.onFunctionCall && value.scope === \"client\") {\n                                    const result = yield options.onFunctionCall(messages2, currentMessage.function_call);\n                                    currentMessage = {\n                                        id: (0, import_nanoid3.nanoid)(),\n                                        role: \"function\",\n                                        content: (0, import_shared3.encodeResult)(result),\n                                        name: currentMessage.function_call.name\n                                    };\n                                    newMessages.push(currentMessage);\n                                    setMessages([\n                                        ...messages2,\n                                        ...newMessages\n                                    ]);\n                                    feedback = true;\n                                }\n                            } catch (error) {\n                                console.error(\"Failed to execute function call\", error);\n                            }\n                        }\n                    }\n                }\n                if (feedback) {\n                    return yield runChatCompletion([\n                        ...messages2,\n                        ...newMessages\n                    ]);\n                } else {\n                    return newMessages.slice();\n                }\n            } finally{\n                setIsLoading(false);\n            }\n        });\n    const runChatCompletionAndHandleFunctionCall = (messages2)=>__async(this, null, function*() {\n            yield runChatCompletion(messages2);\n        });\n    const append = (message)=>__async(this, null, function*() {\n            if (isLoading) {\n                return;\n            }\n            const newMessages = [\n                ...messages,\n                message\n            ];\n            setMessages(newMessages);\n            return runChatCompletionAndHandleFunctionCall(newMessages);\n        });\n    const reload = ()=>__async(this, null, function*() {\n            if (isLoading || messages.length === 0) {\n                return;\n            }\n            let newMessages = [\n                ...messages\n            ];\n            const lastMessage = messages[messages.length - 1];\n            if (lastMessage.role === \"assistant\") {\n                newMessages = newMessages.slice(0, -1);\n            }\n            setMessages(newMessages);\n            return runChatCompletionAndHandleFunctionCall(newMessages);\n        });\n    const stop = ()=>{\n        var _a;\n        (_a = abortControllerRef.current) == null ? void 0 : _a.abort();\n    };\n    return {\n        messages,\n        append,\n        reload,\n        stop,\n        isLoading,\n        input,\n        setInput\n    };\n}\n// src/hooks/use-copilot-chat.ts\nfunction useCopilotChat(_a) {\n    var _b = _a, { makeSystemMessage, additionalInstructions } = _b, options = __objRest(_b, [\n        \"makeSystemMessage\",\n        \"additionalInstructions\"\n    ]);\n    const { getContextString, getChatCompletionFunctionDescriptions, getFunctionCallHandler, copilotApiConfig } = (0, import_react6.useContext)(CopilotContext);\n    const systemMessage = (0, import_react6.useMemo)(()=>{\n        const systemMessageMaker = makeSystemMessage || defaultSystemMessage;\n        const contextString = getContextString([], defaultCopilotContextCategories);\n        return {\n            id: \"system\",\n            content: systemMessageMaker(contextString, additionalInstructions),\n            role: \"system\"\n        };\n    }, [\n        getContextString,\n        makeSystemMessage,\n        additionalInstructions\n    ]);\n    const functionDescriptions = (0, import_react6.useMemo)(()=>{\n        return getChatCompletionFunctionDescriptions();\n    }, [\n        getChatCompletionFunctionDescriptions\n    ]);\n    const { messages, append, reload, stop, isLoading, input, setInput } = useChat(__spreadProps(__spreadValues({}, options), {\n        copilotConfig: copilotApiConfig,\n        id: options.id,\n        initialMessages: [\n            systemMessage\n        ].concat(options.initialMessages || []),\n        tools: functionDescriptions,\n        onFunctionCall: getFunctionCallHandler(),\n        headers: __spreadValues({}, options.headers),\n        body: __spreadValues({}, options.body)\n    }));\n    const visibleMessages = messages.filter((message)=>message.role === \"user\" || message.role === \"assistant\" || message.role === \"function\");\n    return {\n        visibleMessages,\n        append,\n        reload,\n        stop,\n        isLoading,\n        input,\n        setInput\n    };\n}\nfunction defaultSystemMessage(contextString, additionalInstructions) {\n    return `\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\n\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\nAlways be polite and respectful, and prefer brevity over verbosity.\n\nThe user has provided you with the following context:\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThey have also provided you with functions you can call to initiate actions on their behalf, or functions you can call to receive more information.\n\nPlease assist them as best you can.\n\nYou can ask them for clarifying questions if needed, but don't be annoying about it. If you can reasonably 'fill in the blanks' yourself, do so.\n\nIf you would like to call a function, call it without saying anything else.\n` + (additionalInstructions ? `\n\n${additionalInstructions}` : \"\");\n}\n// src/hooks/use-make-copilot-actionable.ts\nvar import_react7 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_nanoid4 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\");\nvar import_shared4 = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\nfunction useMakeCopilotActionable(annotatedFunction, dependencies) {\n    const idRef = (0, import_react7.useRef)((0, import_nanoid4.nanoid)());\n    const { setEntryPoint, removeEntryPoint } = (0, import_react7.useContext)(CopilotContext);\n    const memoizedAnnotatedFunction = (0, import_react7.useMemo)(()=>({\n            name: annotatedFunction.name,\n            description: annotatedFunction.description,\n            argumentAnnotations: annotatedFunction.argumentAnnotations,\n            implementation: annotatedFunction.implementation\n        }), dependencies);\n    (0, import_react7.useEffect)(()=>{\n        const action = (0, import_shared4.annotatedFunctionToAction)(memoizedAnnotatedFunction);\n        setEntryPoint(idRef.current, action);\n        return ()=>{\n            removeEntryPoint(idRef.current);\n        };\n    }, [\n        memoizedAnnotatedFunction,\n        setEntryPoint,\n        removeEntryPoint\n    ]);\n}\n// src/hooks/use-copilot-action-implementation.ts\nvar import_react8 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_nanoid5 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\");\nfunction useCopilotActionImplementation(action, dependencies) {\n    const { setEntryPoint, removeEntryPoint, entryPoints, chatComponentsCache } = (0, import_react8.useContext)(CopilotContext);\n    const idRef = (0, import_react8.useRef)((0, import_nanoid5.nanoid)());\n    if (dependencies === void 0) {\n        if (entryPoints[idRef.current]) {\n            entryPoints[idRef.current].handler = action.handler;\n            if (typeof action.render === \"function\") {\n                if (chatComponentsCache.current !== null) {\n                    chatComponentsCache.current[action.name] = action.render;\n                }\n            }\n        }\n    }\n    (0, import_react8.useEffect)(()=>{\n        setEntryPoint(idRef.current, action);\n        if (chatComponentsCache.current !== null && action.render !== void 0) {\n            chatComponentsCache.current[action.name] = action.render;\n        }\n        return ()=>{\n            removeEntryPoint(idRef.current);\n        };\n    }, [\n        setEntryPoint,\n        removeEntryPoint,\n        action.description,\n        action.name,\n        // This should be faster than deep equality checking\n        // In addition, all major JS engines guarantee the order of object keys\n        JSON.stringify(action.parameters),\n        // include render only if it's a string\n        typeof action.render === \"string\" ? action.render : void 0,\n        // dependencies set by the developer\n        ...dependencies || []\n    ]);\n}\n// src/hooks/use-copilot-action.ts\nfunction useCopilotAction(action, dependencies) {\n    return useCopilotActionImplementation(action, dependencies);\n}\n// src/hooks/use-make-copilot-readable.ts\nvar import_react9 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useMakeCopilotReadable(information, parentId, categories) {\n    const { addContext, removeContext } = (0, import_react9.useContext)(CopilotContext);\n    const idRef = (0, import_react9.useRef)();\n    (0, import_react9.useEffect)(()=>{\n        const id = addContext(information, parentId, categories);\n        idRef.current = id;\n        return ()=>{\n            removeContext(id);\n        };\n    }, [\n        information,\n        parentId,\n        addContext,\n        removeContext\n    ]);\n    return idRef.current;\n}\n// src/hooks/use-make-copilot-document-readable.ts\nvar import_react10 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nfunction useMakeCopilotDocumentReadable(document, categories, dependencies = []) {\n    const { addDocumentContext, removeDocumentContext } = (0, import_react10.useContext)(CopilotContext);\n    const idRef = (0, import_react10.useRef)();\n    (0, import_react10.useEffect)(()=>{\n        const id = addDocumentContext(document, categories);\n        idRef.current = id;\n        return ()=>{\n            removeDocumentContext(id);\n        };\n    }, [\n        addDocumentContext,\n        removeDocumentContext,\n        ...dependencies\n    ]);\n    return idRef.current;\n}\n// src/openai-assistants/hooks/use-copilot-chat-v2.ts\nvar import_react11 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n// src/openai-assistants/utils/process-message-stream.ts\nfunction processMessageStream(reader, processMessage) {\n    return __async(this, null, function*() {\n        const decoder = new TextDecoder();\n        let buffer = \"\";\n        while(true){\n            const { done, value } = yield reader.read();\n            if (done) {\n                if (buffer.length > 0) {\n                    processMessage(buffer);\n                }\n                break;\n            }\n            buffer += decoder.decode(value, {\n                stream: true\n            });\n            let endIndex;\n            while((endIndex = buffer.indexOf(\"\\n\")) !== -1){\n                processMessage(buffer.substring(0, endIndex).trim());\n                buffer = buffer.substring(endIndex + 1);\n            }\n        }\n    });\n}\n// src/openai-assistants/hooks/use-copilot-chat-v2.ts\nvar import_shared5 = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\nfunction useCopilotChatV2(options) {\n    const { getContextString, getChatCompletionFunctionDescriptions, getFunctionCallHandler, copilotApiConfig } = (0, import_react11.useContext)(CopilotContext);\n    const [messages, setMessages] = (0, import_react11.useState)([]);\n    const [input, setInput] = (0, import_react11.useState)(\"\");\n    const [threadId, setThreadId] = (0, import_react11.useState)(void 0);\n    const [status, setStatus] = (0, import_react11.useState)(\"awaiting_message\");\n    const [error, setError] = (0, import_react11.useState)(void 0);\n    const systemMessage = (0, import_react11.useMemo)(()=>{\n        const systemMessageMaker = options.makeSystemMessage || defaultSystemMessage2;\n        const contextString = getContextString([], defaultCopilotContextCategories);\n        return {\n            id: \"system\",\n            content: systemMessageMaker(contextString),\n            role: \"system\"\n        };\n    }, [\n        getContextString,\n        options.makeSystemMessage\n    ]);\n    const handleInputChange = (e)=>{\n        setInput(e.target.value);\n    };\n    const submitMessage = (e)=>__async(this, null, function*() {\n            var _a, _b;\n            e.preventDefault();\n            if (input === \"\") {\n                return;\n            }\n            setStatus(\"in_progress\");\n            setMessages((messages2)=>[\n                    ...messages2,\n                    {\n                        id: \"\",\n                        role: \"user\",\n                        content: input\n                    }\n                ]);\n            setInput(\"\");\n            const apiUrl = copilotApiConfig.chatApiEndpointV2;\n            const functions = getChatCompletionFunctionDescriptions();\n            const result = yield fetch(apiUrl, {\n                method: \"POST\",\n                headers: __spreadValues(__spreadValues({\n                    \"Content-Type\": \"application/json\"\n                }, copilotApiConfig.headers), options.headers),\n                body: JSON.stringify(__spreadValues(__spreadValues(__spreadValues({\n                    // always use user-provided threadId when available:\n                    threadId: (_b = (_a = options.threadId) != null ? _a : threadId) != null ? _b : null,\n                    message: input\n                }, functions.length > 0 && {\n                    functions\n                }), copilotApiConfig.body), options.body))\n            });\n            if (result.body == null) {\n                throw new Error(\"The response body is empty.\");\n            }\n            yield processMessageStream(result.body.getReader(), (message)=>{\n                try {\n                    const { type, value } = (0, import_shared5.parseStreamPart)(message);\n                    switch(type){\n                        case \"assistant_message\":\n                            {\n                                setMessages((messages2)=>[\n                                        ...messages2,\n                                        {\n                                            id: value.id,\n                                            role: value.role,\n                                            content: value.content[0].text.value\n                                        }\n                                    ]);\n                                break;\n                            }\n                        case \"assistant_control_data\":\n                            {\n                                setThreadId(value.threadId);\n                                setMessages((messages2)=>{\n                                    const lastMessage = messages2[messages2.length - 1];\n                                    lastMessage.id = value.messageId;\n                                    return [\n                                        ...messages2.slice(0, messages2.length - 1),\n                                        lastMessage\n                                    ];\n                                });\n                                break;\n                            }\n                        case \"error\":\n                            {\n                                setError(value);\n                                break;\n                            }\n                    }\n                } catch (error2) {\n                    setError(error2);\n                }\n            });\n            setStatus(\"awaiting_message\");\n        });\n    return {\n        messages,\n        input,\n        handleInputChange,\n        submitMessage,\n        status,\n        error\n    };\n}\nfunction defaultSystemMessage2(contextString) {\n    return `\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\n\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\nAlways be polite and respectful, and prefer brevity over verbosity.\n\nThe user has provided you with the following context:\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThey have also provided you with functions you can call to initiate actions on their behalf, or functions you can call to receive more information.\n\nPlease assist them as best you can.\n\nYou can ask them for clarifying questions if needed, but don't be annoying about it. If you can reasonably 'fill in the blanks' yourself, do so.\n\nIf you would like to call a function, call it without saying anything else.\n`;\n}\n// src/lib/copilot-task.ts\nvar CopilotTask = class {\n    constructor(config){\n        this.instructions = config.instructions;\n        this.actions = config.actions || [];\n        this.includeCopilotReadable = config.includeCopilotReadable || true;\n        this.includeCopilotActionable = config.includeCopilotActionable || true;\n    }\n    run(context, data) {\n        return __async(this, null, function*() {\n            const entryPoints = this.includeCopilotActionable ? Object.assign({}, context.entryPoints) : {};\n            for (const fn of this.actions){\n                entryPoints[fn.name] = fn;\n            }\n            let contextString = \"\";\n            if (data) {\n                contextString = (typeof data === \"string\" ? data : JSON.stringify(data)) + \"\\n\\n\";\n            }\n            if (this.includeCopilotReadable) {\n                contextString += context.getContextString([], defaultCopilotContextCategories);\n            }\n            const systemMessage = {\n                id: \"system\",\n                content: taskSystemMessage(contextString, this.instructions),\n                role: \"system\"\n            };\n            const messages = [\n                systemMessage\n            ];\n            const response = yield fetchAndDecodeChatCompletion({\n                copilotConfig: context.copilotApiConfig,\n                messages,\n                tools: context.getChatCompletionFunctionDescriptions(entryPoints),\n                headers: context.copilotApiConfig.headers,\n                body: context.copilotApiConfig.body\n            });\n            if (!response.events) {\n                throw new Error(\"Failed to execute task\");\n            }\n            const reader = response.events.getReader();\n            let functionCalls = [];\n            while(true){\n                const { done, value } = yield reader.read();\n                if (done) {\n                    break;\n                }\n                if (value.type === \"function\") {\n                    functionCalls.push({\n                        name: value.name,\n                        arguments: JSON.stringify(value.arguments)\n                    });\n                    break;\n                }\n            }\n            if (!functionCalls.length) {\n                throw new Error(\"No function call occurred\");\n            }\n            const functionCallHandler = context.getFunctionCallHandler(entryPoints);\n            for (const functionCall of functionCalls){\n                yield functionCallHandler(messages, functionCall);\n            }\n        });\n    }\n};\nfunction taskSystemMessage(contextString, instructions) {\n    return `\nPlease act as an efficient, competent, conscientious, and industrious professional assistant.\n\nHelp the user achieve their goals, and you do so in a way that is as efficient as possible, without unnecessary fluff, but also without sacrificing professionalism.\nAlways be polite and respectful, and prefer brevity over verbosity.\n\nThe user has provided you with the following context:\n\\`\\`\\`\n${contextString}\n\\`\\`\\`\n\nThey have also provided you with functions you can call to initiate actions on their behalf.\n\nPlease assist them as best you can.\n\nThis is not a conversation, so please do not ask questions. Just call a function without saying anything else.\n\nThe user has given you the following task to complete:\n\n\\`\\`\\`\n${instructions}\n\\`\\`\\`\n`;\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-core/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-ui/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@copilotkit/react-ui/dist/index.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value)=>key in obj ? __defProp(obj, key, {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        value\n    }) : obj[key] = value;\nvar __spreadValues = (a, b)=>{\n    for(var prop in b || (b = {}))if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    if (__getOwnPropSymbols) for (var prop of __getOwnPropSymbols(b)){\n        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);\n    }\n    return a;\n};\nvar __spreadProps = (a, b)=>__defProps(a, __getOwnPropDescs(b));\nvar __objRest = (source, exclude)=>{\n    var target = {};\n    for(var prop in source)if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0) target[prop] = source[prop];\n    if (source != null && __getOwnPropSymbols) for (var prop of __getOwnPropSymbols(source)){\n        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop)) target[prop] = source[prop];\n    }\n    return target;\n};\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(// If the importer is in node compatibility mode or this is not an ESM\n    // file that has been converted to a CommonJS file using a Babel-\n    // compatible transform (i.e. \"__esModule\" has not been set), then set\n    // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n    isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\nvar __async = (__this, __arguments, generator)=>{\n    return new Promise((resolve, reject)=>{\n        var fulfilled = (value)=>{\n            try {\n                step(generator.next(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var rejected = (value)=>{\n            try {\n                step(generator.throw(value));\n            } catch (e) {\n                reject(e);\n            }\n        };\n        var step = (x)=>x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n        step((generator = generator.apply(__this, __arguments)).next());\n    });\n};\n// src/index.tsx\nvar src_exports = {};\n__export(src_exports, {\n    CopilotPopup: ()=>CopilotPopup,\n    CopilotSidebar: ()=>CopilotSidebar\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/components/chat/Chat.tsx\nvar import_react8 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n// src/components/chat/ChatContext.tsx\nvar import_react = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\n// src/components/chat/Icons.tsx\nvar import_jsx_runtime = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar OpenIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    fill: \"currentColor\",\n    width: \"24\",\n    height: \"24\",\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"g\", {\n        transform: \"translate(24, 0) scale(-1, 1)\",\n        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n            fillRule: \"evenodd\",\n            d: \"M5.337 21.718a6.707 6.707 0 01-.533-.074.75.75 0 01-.44-1.223 3.73 3.73 0 00.814-1.686c.023-.115-.022-.317-.254-.543C3.274 16.587 2.25 14.41 2.25 12c0-5.03 4.428-9 9.75-9s9.75 3.97 9.75 9c0 5.03-4.428 9-9.75 9-.833 0-1.643-.097-2.417-.279a6.721 6.721 0 01-4.246.997z\",\n            clipRule: \"evenodd\"\n        })\n    })\n});\nvar CloseIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: \"1.5\",\n    stroke: \"currentColor\",\n    width: \"24\",\n    height: \"24\",\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        d: \"M19.5 8.25l-7.5 7.5-7.5-7.5\"\n    })\n});\nvar HeaderCloseIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: \"1.5\",\n    stroke: \"currentColor\",\n    width: \"24\",\n    height: \"24\",\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        d: \"M6 18L18 6M6 6l12 12\"\n    })\n});\nvar SendIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    width: \"24\",\n    height: \"24\",\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\",\n        d: \"M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5\"\n    })\n});\nvar SpinnerIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(\"svg\", {\n    style: {\n        animation: \"copilotKitSpinAnimation 1s linear infinite\",\n        color: \"rgb(107 114 128)\"\n    },\n    width: \"24\",\n    height: \"24\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    children: [\n        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"circle\", {\n            style: {\n                opacity: 0.25\n            },\n            cx: \"12\",\n            cy: \"12\",\n            r: \"10\",\n            stroke: \"currentColor\",\n            strokeWidth: \"4\"\n        }),\n        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n            style: {\n                opacity: 0.75\n            },\n            fill: \"currentColor\",\n            d: \"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n        })\n    ]\n});\nvar ActivityIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(\"svg\", {\n    style: {\n        display: \"inline-block\",\n        marginLeft: \"0.25rem\",\n        marginRight: \"0.25rem\"\n    },\n    height: \"24\",\n    width: \"24\",\n    viewBox: \"0 0 27 27\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"currentColor\",\n    children: [\n        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"circle\", {\n            className: \"copilotKitActivityDot1\",\n            cx: \"4\",\n            cy: \"12\",\n            r: \"3\"\n        }),\n        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"circle\", {\n            className: \"copilotKitActivityDot1 copilotKitActivityDot2\",\n            cx: \"12\",\n            cy: \"12\",\n            r: \"3\"\n        }),\n        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"circle\", {\n            className: \"copilotKitActivityDot1 copilotKitActivityDot3\",\n            cx: \"20\",\n            cy: \"12\",\n            r: \"3\"\n        })\n    ]\n});\nfunction CheckIcon(_a) {\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", __spreadProps(__spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 256 256\",\n        fill: \"currentColor\",\n        style: {\n            height: \"1rem\",\n            width: \"1rem\"\n        },\n        className\n    }, props), {\n        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n            d: \"m229.66 77.66-128 128a8 8 0 0 1-11.32 0l-56-56a8 8 0 0 1 11.32-11.32L96 188.69 218.34 66.34a8 8 0 0 1 11.32 11.32Z\"\n        })\n    }));\n}\nfunction DownloadIcon(_a) {\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", __spreadProps(__spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 256 256\",\n        fill: \"currentColor\",\n        style: {\n            height: \"1rem\",\n            width: \"1rem\"\n        },\n        className\n    }, props), {\n        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n            d: \"M224 152v56a16 16 0 0 1-16 16H48a16 16 0 0 1-16-16v-56a8 8 0 0 1 16 0v56h160v-56a8 8 0 0 1 16 0Zm-101.66 5.66a8 8 0 0 0 11.32 0l40-40a8 8 0 0 0-11.32-11.32L136 132.69V40a8 8 0 0 0-16 0v92.69l-26.34-26.35a8 8 0 0 0-11.32 11.32Z\"\n        })\n    }));\n}\nfunction CopyIcon(_a) {\n    var _b = _a, { className } = _b, props = __objRest(_b, [\n        \"className\"\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", __spreadProps(__spreadValues({\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: \"0 0 256 256\",\n        fill: \"currentColor\",\n        style: {\n            height: \"1rem\",\n            width: \"1rem\"\n        },\n        className\n    }, props), {\n        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n            d: \"M216 32H88a8 8 0 0 0-8 8v40H40a8 8 0 0 0-8 8v128a8 8 0 0 0 8 8h128a8 8 0 0 0 8-8v-40h40a8 8 0 0 0 8-8V40a8 8 0 0 0-8-8Zm-56 176H48V96h112Zm48-48h-32V88a8 8 0 0 0-8-8H96V48h112Z\"\n        })\n    }));\n}\nvar StopIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 256 256\",\n    fill: \"currentColor\",\n    style: {\n        height: \"1rem\",\n        width: \"1rem\"\n    },\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n        d: \"M128 24a104 104 0 1 0 104 104A104.11 104.11 0 0 0 128 24Zm0 192a88 88 0 1 1 88-88 88.1 88.1 0 0 1-88 88Zm24-120h-48a8 8 0 0 0-8 8v48a8 8 0 0 0 8 8h48a8 8 0 0 0 8-8v-48a8 8 0 0 0-8-8Zm-8 48h-32v-32h32Z\"\n    })\n});\nvar RegenerateIcon = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 256 256\",\n    fill: \"currentColor\",\n    style: {\n        height: \"1rem\",\n        width: \"1rem\"\n    },\n    children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(\"path\", {\n        d: \"M197.67 186.37a8 8 0 0 1 0 11.29C196.58 198.73 170.82 224 128 224c-37.39 0-64.53-22.4-80-39.85V208a8 8 0 0 1-16 0v-48a8 8 0 0 1 8-8h48a8 8 0 0 1 0 16H55.44C67.76 183.35 93 208 128 208c36 0 58.14-21.46 58.36-21.68a8 8 0 0 1 11.31.05ZM216 40a8 8 0 0 0-8 8v23.85C192.53 54.4 165.39 32 128 32c-42.82 0-68.58 25.27-69.66 26.34a8 8 0 0 0 11.3 11.34C69.86 69.46 92 48 128 48c35 0 60.24 24.65 72.56 40H168a8 8 0 0 0 0 16h48a8 8 0 0 0 8-8V48a8 8 0 0 0-8-8Z\"\n    })\n});\n// src/components/chat/ChatContext.tsx\nvar import_jsx_runtime2 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar ChatContext = import_react.default.createContext(void 0);\nfunction useChatContext() {\n    const context = import_react.default.useContext(ChatContext);\n    if (context === void 0) {\n        throw new Error(\"Context not found. Did you forget to wrap your app in a <ChatContextProvider> component?\");\n    }\n    return context;\n}\nvar ChatContextProvider = ({ // temperature,\n// instructions,\n// maxFeedback,\nlabels, icons, children })=>{\n    const context = (0, import_react.useMemo)(()=>({\n            labels: __spreadValues(__spreadValues({}, {\n                initial: \"\",\n                title: \"CopilotKit\",\n                placeholder: \"Type a message...\",\n                thinking: \"Thinking...\",\n                done: \"✅ Done\",\n                error: \"❌ An error occurred. Please try again.\",\n                stopGenerating: \"Stop generating\",\n                regenerateResponse: \"Regenerate response\"\n            }), labels),\n            icons: __spreadProps(__spreadValues({}, {\n                openIcon: OpenIcon,\n                closeIcon: CloseIcon,\n                headerCloseIcon: HeaderCloseIcon,\n                sendIcon: SendIcon,\n                activityIcon: ActivityIcon,\n                spinnerIcon: SpinnerIcon,\n                stopIcon: StopIcon,\n                regenerateIcon: RegenerateIcon\n            }), {\n                icons\n            })\n        }), [\n        labels,\n        icons\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(ChatContext.Provider, {\n        value: context,\n        children\n    });\n};\n// src/components/chat/Chat.tsx\nvar import_react_core2 = __webpack_require__(/*! @copilotkit/react-core */ \"(ssr)/./node_modules/@copilotkit/react-core/dist/index.js\");\n// src/components/chat/Window.tsx\nvar import_react2 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_jsx_runtime3 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Window = ({ open, setOpen, children, clickOutsideToClose, shortcut, hitEscapeToClose })=>{\n    const windowRef = import_react2.default.useRef(null);\n    const handleClickOutside = (0, import_react2.useCallback)((event)=>{\n        var _a;\n        if (!clickOutsideToClose) {\n            return;\n        }\n        const parentElement = (_a = windowRef.current) == null ? void 0 : _a.parentElement;\n        if (open && parentElement && !parentElement.contains(event.target)) {\n            setOpen(false);\n        }\n    }, [\n        clickOutsideToClose,\n        open,\n        setOpen\n    ]);\n    const handleKeyDown = (0, import_react2.useCallback)((event)=>{\n        var _a;\n        const target = event.target;\n        const isInput = target.tagName === \"INPUT\" || target.tagName === \"SELECT\" || target.tagName === \"TEXTAREA\" || target.isContentEditable;\n        const isDescendantOfWrapper = (_a = windowRef.current) == null ? void 0 : _a.contains(target);\n        if (open && event.key === \"Escape\" && (!isInput || isDescendantOfWrapper) && hitEscapeToClose) {\n            setOpen(false);\n        } else if (event.key === shortcut && (isMacOS() && event.metaKey || !isMacOS() && event.ctrlKey) && (!isInput || isDescendantOfWrapper)) {\n            setOpen(!open);\n        }\n    }, [\n        hitEscapeToClose,\n        shortcut,\n        open,\n        setOpen\n    ]);\n    const adjustForMobile = (0, import_react2.useCallback)(()=>{\n        const copilotKitWindow = windowRef.current;\n        const vv = window.visualViewport;\n        if (!copilotKitWindow || !vv) {\n            return;\n        }\n        if (window.innerWidth < 640 && open) {\n            copilotKitWindow.style.height = `${vv.height}px`;\n            copilotKitWindow.style.left = `${vv.offsetLeft}px`;\n            copilotKitWindow.style.top = `${vv.offsetTop}px`;\n            document.body.style.position = \"fixed\";\n            document.body.style.width = \"100%\";\n            document.body.style.height = `${window.innerHeight}px`;\n            document.body.style.overflow = \"hidden\";\n            document.body.style.touchAction = \"none\";\n            document.body.addEventListener(\"touchmove\", preventScroll, {\n                passive: false\n            });\n        } else {\n            copilotKitWindow.style.height = \"\";\n            copilotKitWindow.style.left = \"\";\n            copilotKitWindow.style.top = \"\";\n            document.body.style.position = \"\";\n            document.body.style.height = \"\";\n            document.body.style.width = \"\";\n            document.body.style.overflow = \"\";\n            document.body.style.top = \"\";\n            document.body.style.touchAction = \"\";\n            document.body.removeEventListener(\"touchmove\", preventScroll);\n        }\n    }, [\n        open\n    ]);\n    (0, import_react2.useEffect)(()=>{\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        document.addEventListener(\"keydown\", handleKeyDown);\n        if (window.visualViewport) {\n            window.visualViewport.addEventListener(\"resize\", adjustForMobile);\n            adjustForMobile();\n        }\n        return ()=>{\n            document.removeEventListener(\"mousedown\", handleClickOutside);\n            document.removeEventListener(\"keydown\", handleKeyDown);\n            if (window.visualViewport) {\n                window.visualViewport.removeEventListener(\"resize\", adjustForMobile);\n            }\n        };\n    }, [\n        adjustForMobile,\n        handleClickOutside,\n        handleKeyDown\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(\"div\", {\n        className: `copilotKitWindow${open ? \" open\" : \"\"}`,\n        ref: windowRef,\n        children\n    });\n};\nvar preventScroll = (event)=>{\n    let targetElement = event.target;\n    const hasParentWithClass = (element, className)=>{\n        while(element && element !== document.body){\n            if (element.classList.contains(className)) {\n                return true;\n            }\n            element = element.parentElement;\n        }\n        return false;\n    };\n    if (!hasParentWithClass(targetElement, \"copilotKitMessages\")) {\n        event.preventDefault();\n    }\n};\nfunction isMacOS() {\n    return /Mac|iMac|Macintosh/i.test(navigator.userAgent);\n}\n// src/components/chat/Button.tsx\nvar import_jsx_runtime4 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Button = ({ open, setOpen })=>{\n    const context = useChatContext();\n    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"div\", {\n        onClick: ()=>setOpen(!open),\n        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(\"button\", {\n            className: `copilotKitButton ${open ? \"open\" : \"\"}`,\n            \"aria-label\": open ? \"Close Chat\" : \"Open Chat\",\n            children: [\n                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"div\", {\n                    className: \"copilotKitButtonIcon copilotKitButtonIconOpen\",\n                    children: context.icons.openIcon\n                }),\n                /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(\"div\", {\n                    className: \"copilotKitButtonIcon copilotKitButtonIconClose\",\n                    children: context.icons.closeIcon\n                })\n            ]\n        })\n    });\n};\n// src/components/chat/Header.tsx\nvar import_jsx_runtime5 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Header = ({ setOpen })=>{\n    const context = useChatContext();\n    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(\"div\", {\n        className: \"copilotKitHeader\",\n        children: [\n            /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"div\", {\n                children: context.labels.title\n            }),\n            /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(\"button\", {\n                onClick: ()=>setOpen(false),\n                \"aria-label\": \"Close\",\n                children: context.icons.headerCloseIcon\n            })\n        ]\n    });\n};\n// src/components/chat/Messages.tsx\nvar import_react5 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar import_nanoid = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/index.js\");\nvar import_shared = __webpack_require__(/*! @copilotkit/shared */ \"(ssr)/./node_modules/@copilotkit/shared/dist/index.js\");\n// src/components/chat/Markdown.tsx\nvar import_react4 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_react_markdown = __toESM(__webpack_require__(/*! react-markdown */ \"(ssr)/./node_modules/react-markdown/index.js\"));\n// src/components/chat/CodeBlock.tsx\nvar import_react3 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_react_syntax_highlighter = __webpack_require__(/*! react-syntax-highlighter */ \"(ssr)/./node_modules/react-syntax-highlighter/dist/esm/index.js\");\nvar import_prism = __webpack_require__(/*! react-syntax-highlighter/dist/esm/styles/prism */ \"(ssr)/./node_modules/react-syntax-highlighter/dist/esm/styles/prism/index.js\");\n// src/hooks/use-copy-to-clipboard.tsx\nvar React3 = __toESM(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nfunction useCopyToClipboard({ timeout = 2e3 }) {\n    const [isCopied, setIsCopied] = React3.useState(false);\n    const copyToClipboard = (value)=>{\n        var _a;\n        if (true) {\n            return;\n        }\n        if (!value) {\n            return;\n        }\n        navigator.clipboard.writeText(value).then(()=>{\n            setIsCopied(true);\n            setTimeout(()=>{\n                setIsCopied(false);\n            }, timeout);\n        });\n    };\n    return {\n        isCopied,\n        copyToClipboard\n    };\n}\n// src/components/chat/CodeBlock.tsx\nvar import_jsx_runtime6 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar programmingLanguages = {\n    javascript: \".js\",\n    python: \".py\",\n    java: \".java\",\n    c: \".c\",\n    cpp: \".cpp\",\n    \"c++\": \".cpp\",\n    \"c#\": \".cs\",\n    ruby: \".rb\",\n    php: \".php\",\n    swift: \".swift\",\n    \"objective-c\": \".m\",\n    kotlin: \".kt\",\n    typescript: \".ts\",\n    go: \".go\",\n    perl: \".pl\",\n    rust: \".rs\",\n    scala: \".scala\",\n    haskell: \".hs\",\n    lua: \".lua\",\n    shell: \".sh\",\n    sql: \".sql\",\n    html: \".html\",\n    css: \".css\"\n};\nvar generateRandomString = (length, lowercase = false)=>{\n    const chars = \"ABCDEFGHJKLMNPQRSTUVWXY3456789\";\n    let result = \"\";\n    for(let i = 0; i < length; i++){\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return lowercase ? result.toLowerCase() : result;\n};\nvar CodeBlock = (0, import_react3.memo)(({ language, value })=>{\n    const { isCopied, copyToClipboard } = useCopyToClipboard({\n        timeout: 2e3\n    });\n    const downloadAsFile = ()=>{\n        if (true) {\n            return;\n        }\n        const fileExtension = programmingLanguages[language] || \".file\";\n        const suggestedFileName = `file-${generateRandomString(3, true)}${fileExtension}`;\n        const fileName = window.prompt(\"Enter file name\", suggestedFileName);\n        if (!fileName) {\n            return;\n        }\n        const blob = new Blob([\n            value\n        ], {\n            type: \"text/plain\"\n        });\n        const url = URL.createObjectURL(blob);\n        const link = document.createElement(\"a\");\n        link.download = fileName;\n        link.href = url;\n        link.style.display = \"none\";\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n        URL.revokeObjectURL(url);\n    };\n    const onCopy = ()=>{\n        if (isCopied) return;\n        copyToClipboard(value);\n    };\n    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(\"div\", {\n        className: \"copilotKitCodeBlock\",\n        children: [\n            /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(\"div\", {\n                className: \"copilotKitCodeBlockToolbar\",\n                children: [\n                    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(\"span\", {\n                        className: \"copilotKitCodeBlockToolbarLanguage\",\n                        children: language\n                    }),\n                    /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(\"div\", {\n                        className: \"copilotKitCodeBlockToolbarButtons\",\n                        children: [\n                            /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(\"button\", {\n                                className: \"copilotKitCodeBlockToolbarButton\",\n                                onClick: downloadAsFile,\n                                children: [\n                                    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(DownloadIcon, {}),\n                                    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(\"span\", {\n                                        className: \"sr-only\",\n                                        children: \"Download\"\n                                    })\n                                ]\n                            }),\n                            /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(\"button\", {\n                                className: \"copilotKitCodeBlockToolbarButton\",\n                                onClick: onCopy,\n                                children: [\n                                    isCopied ? /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CheckIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CopyIcon, {}),\n                                    /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(\"span\", {\n                                        className: \"sr-only\",\n                                        children: \"Copy code\"\n                                    })\n                                ]\n                            })\n                        ]\n                    })\n                ]\n            }),\n            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_react_syntax_highlighter.Prism, {\n                language,\n                style: import_prism.vscDarkPlus,\n                PreTag: \"div\",\n                customStyle: {\n                    margin: 0,\n                    borderBottomLeftRadius: \"0.375rem\",\n                    borderBottomRightRadius: \"0.375rem\"\n                },\n                children: value\n            })\n        ]\n    });\n});\nCodeBlock.displayName = \"CodeBlock\";\n// src/components/chat/Markdown.tsx\nvar import_remark_gfm = __toESM(__webpack_require__(/*! remark-gfm */ \"(ssr)/./node_modules/remark-gfm/index.js\"));\nvar import_remark_math = __toESM(__webpack_require__(/*! remark-math */ \"(ssr)/./node_modules/remark-math/index.js\"));\nvar import_jsx_runtime7 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar MemoizedReactMarkdown = (0, import_react4.memo)(import_react_markdown.default, (prevProps, nextProps)=>prevProps.children === nextProps.children && prevProps.className === nextProps.className);\nvar Markdown = ({ content })=>{\n    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(\"div\", {\n        className: \"copilotKitMarkdown\",\n        children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(MemoizedReactMarkdown, {\n            components,\n            remarkPlugins: [\n                import_remark_gfm.default,\n                import_remark_math.default\n            ],\n            children: content\n        })\n    });\n};\nvar components = {\n    p ({ children }) {\n        return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(\"p\", {\n            children\n        });\n    },\n    code (_a) {\n        var _b = _a, { children, className, inline } = _b, props = __objRest(_b, [\n            \"children\",\n            \"className\",\n            \"inline\"\n        ]);\n        if (children.length) {\n            if (children[0] == \"▍\") {\n                return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(\"span\", {\n                    style: {\n                        animation: \"pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite\",\n                        marginTop: \"0.25rem\"\n                    },\n                    children: \"▍\"\n                });\n            }\n            children[0] = children[0].replace(\"`▍`\", \"▍\");\n        }\n        const match = /language-(\\w+)/.exec(className || \"\");\n        if (inline) {\n            return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(\"code\", __spreadProps(__spreadValues({\n                className\n            }, props), {\n                children\n            }));\n        }\n        return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CodeBlock, __spreadValues({\n            language: match && match[1] || \"\",\n            value: String(children).replace(/\\n$/, \"\")\n        }, props), Math.random());\n    }\n};\n// src/components/chat/Messages.tsx\nvar import_react_core = __webpack_require__(/*! @copilotkit/react-core */ \"(ssr)/./node_modules/@copilotkit/react-core/dist/index.js\");\nvar import_jsx_runtime8 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Messages = ({ messages, inProgress })=>{\n    const { entryPoints, chatComponentsCache } = (0, import_react_core.useCopilotContext)();\n    const context = useChatContext();\n    const initialMessages = (0, import_react5.useMemo)(()=>makeInitialMessages(context.labels.initial), [\n        context.labels.initial\n    ]);\n    messages = [\n        ...initialMessages,\n        ...messages\n    ];\n    const functionResults = {};\n    for(let i = 0; i < messages.length; i++){\n        if (messages[i].role === \"assistant\" && messages[i].function_call) {\n            const id = messages[i].id;\n            if (i + 1 < messages.length && messages[i + 1].role === \"function\") {\n                functionResults[id] = (0, import_shared.decodeResult)(messages[i + 1].content || \"\");\n            }\n        }\n    }\n    const messagesEndRef = import_react5.default.useRef(null);\n    const scrollToBottom = ()=>{\n        if (messagesEndRef.current) {\n            messagesEndRef.current.scrollIntoView({\n                behavior: \"auto\"\n            });\n        }\n    };\n    (0, import_react5.useEffect)(()=>{\n        scrollToBottom();\n    }, [\n        messages\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(\"div\", {\n        className: \"copilotKitMessages\",\n        children: [\n            messages.map((message, index)=>{\n                var _a, _b, _c;\n                const isCurrentMessage = index === messages.length - 1;\n                if (message.role === \"user\") {\n                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                        className: \"copilotKitMessage copilotKitUserMessage\",\n                        children: message.content\n                    }, index);\n                } else if (message.role == \"assistant\") {\n                    if (isCurrentMessage && inProgress && !message.content && !message.partialFunctionCall) {\n                        return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                            className: `copilotKitMessage copilotKitAssistantMessage`,\n                            children: context.icons.spinnerIcon\n                        }, index);\n                    } else if (message.function_call || message.partialFunctionCall) {\n                        const functionCallName = ((_a = message.function_call) == null ? void 0 : _a.name) || ((_b = message.partialFunctionCall) == null ? void 0 : _b.name);\n                        if (chatComponentsCache.current !== null && chatComponentsCache.current[functionCallName]) {\n                            const render = chatComponentsCache.current[functionCallName];\n                            if (typeof render === \"string\") {\n                                if (isCurrentMessage && inProgress) {\n                                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(\"div\", {\n                                        className: `copilotKitMessage copilotKitAssistantMessage`,\n                                        children: [\n                                            context.icons.spinnerIcon,\n                                            \" \",\n                                            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"span\", {\n                                                className: \"inProgressLabel\",\n                                                children: render\n                                            })\n                                        ]\n                                    }, index);\n                                } else {\n                                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                                        className: `copilotKitMessage copilotKitAssistantMessage`,\n                                        children: context.labels.done\n                                    }, index);\n                                }\n                            } else {\n                                const args = message.function_call ? JSON.parse(message.function_call.arguments || \"{}\") : (_c = message.partialFunctionCall) == null ? void 0 : _c.arguments;\n                                let status = \"inProgress\";\n                                if (functionResults[message.id] !== void 0) {\n                                    status = \"complete\";\n                                } else if (message.function_call) {\n                                    status = \"executing\";\n                                }\n                                const result = render({\n                                    status,\n                                    args,\n                                    result: functionResults[message.id]\n                                });\n                                if (typeof result === \"string\") {\n                                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(\"div\", {\n                                        className: `copilotKitMessage copilotKitAssistantMessage`,\n                                        children: [\n                                            isCurrentMessage && inProgress && context.icons.spinnerIcon,\n                                            \" \",\n                                            result\n                                        ]\n                                    }, index);\n                                } else {\n                                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                                        className: \"copilotKitCustomAssistantMessage\",\n                                        children: result\n                                    }, index);\n                                }\n                            }\n                        } else if ((!inProgress || !isCurrentMessage) && message.function_call) {\n                            return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                                className: `copilotKitMessage copilotKitAssistantMessage`,\n                                children: context.labels.done\n                            }, index);\n                        } else {\n                            return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                                className: `copilotKitMessage copilotKitAssistantMessage`,\n                                children: context.icons.spinnerIcon\n                            }, index);\n                        }\n                    }\n                    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                        className: `copilotKitMessage copilotKitAssistantMessage`,\n                        children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Markdown, {\n                            content: message.content\n                        })\n                    }, index);\n                }\n            }),\n            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(\"div\", {\n                ref: messagesEndRef\n            })\n        ]\n    });\n};\nfunction makeInitialMessages(initial) {\n    let initialArray = [];\n    if (initial) {\n        if (Array.isArray(initial)) {\n            initialArray.push(...initial);\n        } else {\n            initialArray.push(initial);\n        }\n    }\n    return initialArray.map((message)=>({\n            id: (0, import_nanoid.nanoid)(),\n            role: \"assistant\",\n            content: message\n        }));\n}\n// src/components/chat/Input.tsx\nvar import_react7 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n// src/components/chat/Textarea.tsx\nvar import_react6 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_jsx_runtime9 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar AutoResizingTextarea = (0, import_react6.forwardRef)(({ maxRows = 1, placeholder, value, onChange, onKeyDown, autoFocus }, ref)=>{\n    const internalTextareaRef = (0, import_react6.useRef)(null);\n    const [maxHeight, setMaxHeight] = (0, import_react6.useState)(0);\n    (0, import_react6.useImperativeHandle)(ref, ()=>internalTextareaRef.current);\n    (0, import_react6.useEffect)(()=>{\n        const calculateMaxHeight = ()=>{\n            const textarea = internalTextareaRef.current;\n            if (textarea) {\n                textarea.style.height = \"auto\";\n                const singleRowHeight = textarea.scrollHeight;\n                setMaxHeight(singleRowHeight * maxRows);\n                if (autoFocus) {\n                    textarea.focus();\n                }\n            }\n        };\n        calculateMaxHeight();\n    }, [\n        maxRows\n    ]);\n    (0, import_react6.useEffect)(()=>{\n        const textarea = internalTextareaRef.current;\n        if (textarea) {\n            textarea.style.height = \"auto\";\n            textarea.style.height = `${Math.min(textarea.scrollHeight, maxHeight)}px`;\n        }\n    }, [\n        value,\n        maxHeight\n    ]);\n    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(\"textarea\", {\n        ref: internalTextareaRef,\n        value,\n        onChange,\n        onKeyDown,\n        placeholder,\n        style: {\n            overflow: \"hidden\",\n            resize: \"none\",\n            maxHeight: `${maxHeight}px`\n        },\n        rows: 1\n    });\n});\nvar Textarea_default = AutoResizingTextarea;\n// src/components/chat/Input.tsx\nvar import_jsx_runtime10 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar Input = ({ inProgress, onSend, children, isVisible = false })=>{\n    const context = useChatContext();\n    const textareaRef = (0, import_react7.useRef)(null);\n    const handleDivClick = (event)=>{\n        var _a;\n        if (event.target !== event.currentTarget) return;\n        (_a = textareaRef.current) == null ? void 0 : _a.focus();\n    };\n    const [text, setText] = (0, import_react7.useState)(\"\");\n    const send = ()=>{\n        var _a;\n        if (inProgress) return;\n        onSend(text);\n        setText(\"\");\n        (_a = textareaRef.current) == null ? void 0 : _a.focus();\n    };\n    (0, import_react7.useEffect)(()=>{\n        var _a;\n        if (isVisible) {\n            (_a = textareaRef.current) == null ? void 0 : _a.focus();\n        }\n    }, [\n        isVisible\n    ]);\n    const icon = inProgress ? context.icons.activityIcon : context.icons.sendIcon;\n    const disabled = inProgress || text.length === 0;\n    return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(\"div\", {\n        className: \"copilotKitInput\",\n        onClick: handleDivClick,\n        children: [\n            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(\"span\", {\n                children\n            }),\n            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(\"button\", {\n                className: \"copilotKitSendButton\",\n                disabled,\n                onClick: send,\n                children: icon\n            }),\n            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Textarea_default, {\n                ref: textareaRef,\n                placeholder: context.labels.placeholder,\n                autoFocus: true,\n                maxRows: 5,\n                value: text,\n                onChange: (event)=>setText(event.target.value),\n                onKeyDown: (event)=>{\n                    if (event.key === \"Enter\" && !event.shiftKey) {\n                        event.preventDefault();\n                        send();\n                    }\n                }\n            })\n        ]\n    });\n};\n// src/components/chat/Chat.tsx\nvar import_nanoid2 = __webpack_require__(/*! nanoid */ \"(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/index.js\");\n// src/components/chat/Response.tsx\nvar import_jsx_runtime11 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar ResponseButton = ({ onClick, inProgress })=>{\n    const context = useChatContext();\n    return /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(\"button\", {\n        onClick,\n        className: \"copilotKitResponseButton\",\n        children: [\n            /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(\"span\", {\n                children: inProgress ? context.icons.stopIcon : context.icons.regenerateIcon\n            }),\n            inProgress ? context.labels.stopGenerating : context.labels.regenerateResponse\n        ]\n    });\n};\n// src/components/chat/Chat.tsx\nvar import_jsx_runtime12 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar CopilotChat = ({ instructions, defaultOpen = false, clickOutsideToClose = true, hitEscapeToClose = true, onSetOpen, onSubmitMessage, shortcut = \"/\", icons, labels, makeSystemMessage, showResponseButton = true, onInProgress, Window: Window2 = Window, Button: Button2 = Button, Header: Header2 = Header, Messages: Messages2 = Messages, Input: Input2 = Input, ResponseButton: ResponseButton2 = ResponseButton, className })=>{\n    const { visibleMessages, append, reload, stop, isLoading, input, setInput } = (0, import_react_core2.useCopilotChat)({\n        id: (0, import_nanoid2.nanoid)(),\n        makeSystemMessage,\n        additionalInstructions: instructions\n    });\n    (0, import_react8.useEffect)(()=>{\n        onInProgress == null ? void 0 : onInProgress(isLoading);\n    }, [\n        isLoading\n    ]);\n    const [openState, setOpenState] = import_react8.default.useState(defaultOpen);\n    const setOpen = (open)=>{\n        onSetOpen == null ? void 0 : onSetOpen(open);\n        setOpenState(open);\n    };\n    const sendMessage = (message)=>__async(void 0, null, function*() {\n            onSubmitMessage == null ? void 0 : onSubmitMessage(message);\n            append({\n                id: (0, import_nanoid2.nanoid)(),\n                content: message,\n                role: \"user\"\n            });\n        });\n    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ChatContextProvider, {\n        icons,\n        labels,\n        children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(\"div\", {\n            className,\n            children: [\n                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Button2, {\n                    open: openState,\n                    setOpen\n                }),\n                /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(Window2, {\n                    open: openState,\n                    setOpen,\n                    clickOutsideToClose,\n                    shortcut,\n                    hitEscapeToClose,\n                    children: [\n                        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Header2, {\n                            open: openState,\n                            setOpen\n                        }),\n                        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Messages2, {\n                            messages: visibleMessages,\n                            inProgress: isLoading\n                        }),\n                        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Input2, {\n                            inProgress: isLoading,\n                            onSend: sendMessage,\n                            isVisible: openState,\n                            children: showResponseButton && visibleMessages.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ResponseButton2, {\n                                onClick: isLoading ? stop : reload,\n                                inProgress: isLoading\n                            })\n                        })\n                    ]\n                })\n            ]\n        })\n    });\n};\n// src/components/chat/Popup.tsx\nvar import_jsx_runtime13 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar CopilotPopup = (props)=>{\n    props = __spreadProps(__spreadValues({}, props), {\n        className: props.className ? props.className + \" copilotKitPopup\" : \"copilotKitPopup\"\n    });\n    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(CopilotChat, __spreadValues({}, props));\n};\n// src/components/chat/Sidebar.tsx\nvar import_react9 = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar import_jsx_runtime14 = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\nvar CopilotSidebar = (props)=>{\n    props = __spreadProps(__spreadValues({}, props), {\n        className: props.className ? props.className + \" copilotKitSidebar\" : \"copilotKitSidebar\"\n    });\n    const [expandedClassName, setExpandedClassName] = (0, import_react9.useState)(props.defaultOpen ? \"sidebarExpanded\" : \"\");\n    const onSetOpen = (open)=>{\n        var _a;\n        (_a = props.onSetOpen) == null ? void 0 : _a.call(props, open);\n        setExpandedClassName(open ? \"sidebarExpanded\" : \"\");\n    };\n    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(\"div\", {\n        className: `copilotKitSidebarContentWrapper ${expandedClassName}`,\n        children: [\n            props.children,\n            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(CopilotChat, __spreadValues(__spreadValues({}, props), {\n                onSetOpen\n            }))\n        ]\n    });\n};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-ui/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/shared/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@copilotkit/shared/dist/index.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of __getOwnPropNames(from))if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toCommonJS = (mod)=>__copyProps(__defProp({}, \"__esModule\", {\n        value: true\n    }), mod);\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n    COMPLEX_HEADER: ()=>COMPLEX_HEADER,\n    EXCLUDE_FROM_FORWARD_PROPS_KEYS: ()=>EXCLUDE_FROM_FORWARD_PROPS_KEYS,\n    StreamStringPrefixes: ()=>StreamStringPrefixes,\n    actionToChatCompletionFunction: ()=>actionToChatCompletionFunction,\n    annotatedFunctionToAction: ()=>annotatedFunctionToAction,\n    annotatedFunctionToChatCompletionFunction: ()=>annotatedFunctionToChatCompletionFunction,\n    decodeChatCompletion: ()=>decodeChatCompletion,\n    decodeChatCompletionAsText: ()=>decodeChatCompletionAsText,\n    decodeResult: ()=>decodeResult,\n    encodeResult: ()=>encodeResult,\n    formatStreamPart: ()=>formatStreamPart,\n    isStreamStringEqualToType: ()=>isStreamStringEqualToType,\n    parseChatCompletion: ()=>parseChatCompletion,\n    parseStreamPart: ()=>parseStreamPart,\n    streamPartsByCode: ()=>streamPartsByCode,\n    validCodes: ()=>validCodes\n});\nmodule.exports = __toCommonJS(src_exports);\n// src/utils/utils.ts\nfunction encodeResult(result) {\n    if (result === void 0) {\n        return \"\";\n    } else if (typeof result === \"string\") {\n        return result;\n    } else {\n        return JSON.stringify(result);\n    }\n}\nfunction decodeResult(result) {\n    try {\n        return JSON.parse(result);\n    } catch (e) {\n        return result;\n    }\n}\nvar textStreamPart = {\n    code: \"0\",\n    name: \"text\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"text\" parts expect a string value.');\n        }\n        return {\n            type: \"text\",\n            value\n        };\n    }\n};\nvar functionCallStreamPart = {\n    code: \"1\",\n    name: \"function_call\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"function_call\" in value) || typeof value.function_call !== \"object\" || value.function_call == null || !(\"name\" in value.function_call) || !(\"arguments\" in value.function_call) || typeof value.function_call.name !== \"string\" || typeof value.function_call.arguments !== \"string\") {\n            throw new Error('\"function_call\" parts expect an object with a \"function_call\" property.');\n        }\n        return {\n            type: \"function_call\",\n            value\n        };\n    }\n};\nvar dataStreamPart = {\n    code: \"2\",\n    name: \"data\",\n    parse: (value)=>{\n        if (!Array.isArray(value)) {\n            throw new Error('\"data\" parts expect an array value.');\n        }\n        return {\n            type: \"data\",\n            value\n        };\n    }\n};\nvar errorStreamPart = {\n    code: \"3\",\n    name: \"error\",\n    parse: (value)=>{\n        if (typeof value !== \"string\") {\n            throw new Error('\"error\" parts expect a string value.');\n        }\n        return {\n            type: \"error\",\n            value\n        };\n    }\n};\nvar assistantMessage = {\n    code: \"4\",\n    name: \"assistant_message\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"id\" in value) || !(\"role\" in value) || !(\"content\" in value) || typeof value.id !== \"string\" || typeof value.role !== \"string\" || value.role !== \"assistant\" || !Array.isArray(value.content) || !value.content.every((item)=>item != null && typeof item === \"object\" && \"type\" in item && item.type === \"text\" && \"text\" in item && item.text != null && typeof item.text === \"object\" && \"value\" in item.text && typeof item.text.value === \"string\")) {\n            throw new Error('\"assistant_message\" parts expect an object with an \"id\", \"role\", and \"content\" property.');\n        }\n        return {\n            type: \"assistant_message\",\n            value\n        };\n    }\n};\nvar assistantControlData = {\n    code: \"5\",\n    name: \"assistant_control_data\",\n    parse: (value)=>{\n        if (value == null || typeof value !== \"object\" || !(\"threadId\" in value) || !(\"messageId\" in value) || typeof value.threadId !== \"string\" || typeof value.messageId !== \"string\") {\n            throw new Error('\"assistant_control_data\" parts expect an object with a \"threadId\" and \"messageId\" property.');\n        }\n        return {\n            type: \"assistant_control_data\",\n            value: {\n                threadId: value.threadId,\n                messageId: value.messageId\n            }\n        };\n    }\n};\nvar streamParts = [\n    textStreamPart,\n    functionCallStreamPart,\n    dataStreamPart,\n    errorStreamPart,\n    assistantMessage,\n    assistantControlData\n];\nvar streamPartsByCode = {\n    [textStreamPart.code]: textStreamPart,\n    [functionCallStreamPart.code]: functionCallStreamPart,\n    [dataStreamPart.code]: dataStreamPart,\n    [errorStreamPart.code]: errorStreamPart,\n    [assistantMessage.code]: assistantMessage,\n    [assistantControlData.code]: assistantControlData\n};\nvar StreamStringPrefixes = {\n    [textStreamPart.name]: textStreamPart.code,\n    [functionCallStreamPart.name]: functionCallStreamPart.code,\n    [dataStreamPart.name]: dataStreamPart.code,\n    [errorStreamPart.name]: errorStreamPart.code,\n    [assistantMessage.name]: assistantMessage.code,\n    [assistantControlData.name]: assistantControlData.code\n};\nvar validCodes = streamParts.map((part)=>part.code);\nvar parseStreamPart = (line)=>{\n    const firstSeparatorIndex = line.indexOf(\":\");\n    if (firstSeparatorIndex === -1) {\n        throw new Error(\"Failed to parse stream string. No separator found.\");\n    }\n    const prefix = line.slice(0, firstSeparatorIndex);\n    if (!validCodes.includes(prefix)) {\n        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);\n    }\n    const code = prefix;\n    const textValue = line.slice(firstSeparatorIndex + 1);\n    const jsonValue = JSON.parse(textValue);\n    return streamPartsByCode[code].parse(jsonValue);\n};\nfunction formatStreamPart(type, value) {\n    const streamPart = streamParts.find((part)=>part.name === type);\n    if (!streamPart) {\n        throw new Error(`Invalid stream part type: ${type}`);\n    }\n    return `${streamPart.code}:${JSON.stringify(value)}\n`;\n}\nvar isStreamStringEqualToType = (type, value)=>value.startsWith(`${StreamStringPrefixes[type]}:`) && value.endsWith(\"\\n\");\nvar COMPLEX_HEADER = \"X-Experimental-Stream-Data\";\n// src/utils/parse-chat-completion.ts\nfunction parseChatCompletion(stream) {\n    const reader = stream.getReader();\n    let buffer = new Uint8Array();\n    async function cleanup(controller) {\n        if (controller) {\n            try {\n                controller.close();\n            } catch (_) {}\n        }\n        if (reader) {\n            try {\n                await reader.cancel();\n            } catch (_) {}\n        }\n    }\n    return new ReadableStream({\n        async pull (controller) {\n            while(true){\n                try {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        await cleanup(controller);\n                        return;\n                    }\n                    const newBuffer = new Uint8Array(buffer.length + value.length);\n                    newBuffer.set(buffer);\n                    newBuffer.set(value, buffer.length);\n                    buffer = newBuffer;\n                    const valueString = new TextDecoder(\"utf-8\").decode(buffer);\n                    const lines = valueString.split(\"\\n\").filter((line)=>line.trim() !== \"\");\n                    buffer = !valueString.endsWith(\"\\n\") ? new TextEncoder().encode(lines.pop() || \"\") : new Uint8Array();\n                    for (const line of lines){\n                        const cleanedLine = line.replace(/^data: /, \"\");\n                        if (cleanedLine === \"[DONE]\") {\n                            await cleanup(controller);\n                            return;\n                        }\n                        const json = JSON.parse(cleanedLine);\n                        controller.enqueue(json);\n                    }\n                } catch (error) {\n                    controller.error(error);\n                    await cleanup(controller);\n                    return;\n                }\n            }\n        },\n        cancel () {\n            reader.cancel();\n        }\n    });\n}\n// src/utils/decode-chat-completion.ts\nfunction decodeChatCompletion(stream) {\n    const reader = stream.getReader();\n    let mode = null;\n    let functionCallName = \"\";\n    let functionCallArguments = \"\";\n    let functionCallScope = \"client\";\n    async function cleanup(controller) {\n        if (controller) {\n            try {\n                controller.close();\n            } catch (_) {}\n        }\n        if (reader) {\n            try {\n                await reader.cancel();\n            } catch (_) {}\n        }\n    }\n    return new ReadableStream({\n        async pull (controller) {\n            var _a, _b, _c, _d, _e, _f;\n            const flushFunctionCall = ()=>{\n                let args = null;\n                try {\n                    args = JSON.parse(functionCallArguments);\n                } catch (error) {\n                    cleanup(controller);\n                    controller.error(error);\n                    return false;\n                }\n                controller.enqueue({\n                    type: \"function\",\n                    name: functionCallName,\n                    arguments: args,\n                    scope: functionCallScope\n                });\n                mode = null;\n                functionCallName = \"\";\n                functionCallArguments = \"\";\n                return true;\n            };\n            while(true){\n                try {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        if (mode === \"function\") {\n                            flushFunctionCall();\n                        }\n                        await cleanup(controller);\n                        return;\n                    }\n                    if (mode === \"function\" && (!((_b = (_a = value.choices[0].delta.tool_calls) == null ? void 0 : _a[0]) == null ? void 0 : _b.function) || ((_d = (_c = value.choices[0].delta.tool_calls) == null ? void 0 : _c[0]) == null ? void 0 : _d.function.name))) {\n                        if (!flushFunctionCall()) {\n                            return;\n                        }\n                    }\n                    mode = ((_f = (_e = value.choices[0].delta.tool_calls) == null ? void 0 : _e[0]) == null ? void 0 : _f.function) ? \"function\" : \"message\";\n                    if (mode === \"message\") {\n                        if (value.choices[0].delta.role === \"function\") {\n                            controller.enqueue({\n                                type: \"result\",\n                                content: value.choices[0].delta.content,\n                                name: value.choices[0].delta.name\n                            });\n                        } else if (value.choices[0].delta.content) {\n                            controller.enqueue({\n                                type: \"content\",\n                                content: value.choices[0].delta.content\n                            });\n                        }\n                        continue;\n                    } else if (mode === \"function\") {\n                        if (value.choices[0].delta.tool_calls[0].function.name) {\n                            functionCallName = value.choices[0].delta.tool_calls[0].function.name;\n                        }\n                        if (value.choices[0].delta.tool_calls[0].function.arguments) {\n                            functionCallArguments += value.choices[0].delta.tool_calls[0].function.arguments;\n                        }\n                        if (value.choices[0].delta.tool_calls[0].function.scope) {\n                            functionCallScope = value.choices[0].delta.tool_calls[0].function.scope;\n                        }\n                        controller.enqueue({\n                            type: \"partial\",\n                            name: functionCallName,\n                            arguments: functionCallArguments\n                        });\n                        continue;\n                    }\n                } catch (error) {\n                    controller.error(error);\n                    await cleanup(controller);\n                    return;\n                }\n            }\n        },\n        cancel () {\n            reader.cancel();\n        }\n    });\n}\n// src/utils/decode-chat-completion-as-text.ts\nfunction decodeChatCompletionAsText(stream) {\n    const reader = stream.getReader();\n    return new ReadableStream({\n        async pull (controller) {\n            while(true){\n                try {\n                    const { done, value } = await reader.read();\n                    if (done) {\n                        controller.close();\n                        return;\n                    }\n                    if (value.type === \"content\") {\n                        controller.enqueue(value.content);\n                        continue;\n                    }\n                } catch (error) {\n                    controller.error(error);\n                    return;\n                }\n            }\n        },\n        cancel () {\n            reader.cancel();\n        }\n    });\n}\n// src/utils/annotated-function.ts\nfunction annotatedFunctionToChatCompletionFunction(annotatedFunction) {\n    let parameters = {};\n    for (let arg of annotatedFunction.argumentAnnotations){\n        let { name, required, ...forwardedArgs } = arg;\n        parameters[arg.name] = forwardedArgs;\n    }\n    let requiredParameterNames = [];\n    for (let arg of annotatedFunction.argumentAnnotations){\n        if (arg.required) {\n            requiredParameterNames.push(arg.name);\n        }\n    }\n    let chatCompletionFunction = {\n        type: \"function\",\n        function: {\n            name: annotatedFunction.name,\n            description: annotatedFunction.description,\n            parameters: {\n                type: \"object\",\n                properties: parameters,\n                required: requiredParameterNames\n            }\n        }\n    };\n    return chatCompletionFunction;\n}\nfunction convertAttribute(attribute) {\n    var _a, _b, _c;\n    switch(attribute.type){\n        case \"string\":\n            return {\n                type: \"string\",\n                description: attribute.description,\n                ...attribute.enum && {\n                    enum: attribute.enum\n                }\n            };\n        case \"number\":\n        case \"boolean\":\n            return {\n                type: attribute.type,\n                description: attribute.description\n            };\n        case \"object\":\n        case \"object[]\":\n            const properties = (_a = attribute.attributes) == null ? void 0 : _a.reduce((acc, attr)=>{\n                acc[attr.name] = convertAttribute(attr);\n                return acc;\n            }, {});\n            const required = (_b = attribute.attributes) == null ? void 0 : _b.filter((attr)=>attr.required !== false).map((attr)=>attr.name);\n            if (attribute.type === \"object[]\") {\n                return {\n                    type: \"array\",\n                    items: {\n                        type: \"object\",\n                        ...properties && {\n                            properties\n                        },\n                        ...required && required.length > 0 && {\n                            required\n                        }\n                    },\n                    description: attribute.description\n                };\n            }\n            return {\n                type: \"object\",\n                description: attribute.description,\n                ...properties && {\n                    properties\n                },\n                ...required && required.length > 0 && {\n                    required\n                }\n            };\n        default:\n            if ((_c = attribute.type) == null ? void 0 : _c.endsWith(\"[]\")) {\n                const itemType = attribute.type.slice(0, -2);\n                return {\n                    type: \"array\",\n                    items: {\n                        type: itemType\n                    },\n                    description: attribute.description\n                };\n            }\n            return {\n                type: \"string\",\n                description: attribute.description\n            };\n    }\n}\nfunction actionToChatCompletionFunction(action) {\n    let parameters = {};\n    for (let parameter of action.parameters || []){\n        parameters[parameter.name] = convertAttribute(parameter);\n    }\n    let requiredParameterNames = [];\n    for (let arg of action.parameters || []){\n        if (arg.required !== false) {\n            requiredParameterNames.push(arg.name);\n        }\n    }\n    let chatCompletionFunction = {\n        type: \"function\",\n        function: {\n            name: action.name,\n            ...action.description && {\n                description: action.description\n            },\n            parameters: {\n                type: \"object\",\n                properties: parameters,\n                required: requiredParameterNames\n            }\n        }\n    };\n    return chatCompletionFunction;\n}\nfunction annotatedFunctionToAction(annotatedFunction) {\n    const parameters = annotatedFunction.argumentAnnotations.map((annotation)=>{\n        switch(annotation.type){\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"object\":\n                return {\n                    name: annotation.name,\n                    description: annotation.description,\n                    type: annotation.type,\n                    required: annotation.required\n                };\n            case \"array\":\n                let type;\n                if (annotation.items.type === \"string\") {\n                    type = \"string[]\";\n                } else if (annotation.items.type === \"number\") {\n                    type = \"number[]\";\n                } else if (annotation.items.type === \"boolean\") {\n                    type = \"boolean[]\";\n                } else if (annotation.items.type === \"object\") {\n                    type = \"object[]\";\n                } else {\n                    type = \"string[]\";\n                }\n                return {\n                    name: annotation.name,\n                    description: annotation.description,\n                    type,\n                    required: annotation.required\n                };\n        }\n    });\n    return {\n        name: annotatedFunction.name,\n        description: annotatedFunction.description,\n        parameters,\n        handler: (args)=>{\n            const paramsInCorrectOrder = [];\n            for (let arg of annotatedFunction.argumentAnnotations){\n                paramsInCorrectOrder.push(args[arg.name]);\n            }\n            return annotatedFunction.implementation(...paramsInCorrectOrder);\n        }\n    };\n}\n// src/constants/copilot-protocol.ts\nvar EXCLUDE_FROM_FORWARD_PROPS_KEYS = \"exclude_from_forward_props_keys\";\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/shared/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-textarea/dist/index.css":
/*!****************************************************************!*\
  !*** ./node_modules/@copilotkit/react-textarea/dist/index.css ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"8a7ce1890562\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtdGV4dGFyZWEvZGlzdC9pbmRleC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92MCBjbG9uZSB3aXRoIGNvcGlsb3RraXQsIG5leHQuanMsIGFuZCBvcGVuYWkgZ3B0NC8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC10ZXh0YXJlYS9kaXN0L2luZGV4LmNzcz9kMWJhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiOGE3Y2UxODkwNTYyXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-textarea/dist/index.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-ui/dist/index.css":
/*!**********************************************************!*\
  !*** ./node_modules/@copilotkit/react-ui/dist/index.css ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"5dfda4719aea\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtdWkvZGlzdC9pbmRleC5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxLQUFVLEVBQUUsRUFBdUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92MCBjbG9uZSB3aXRoIGNvcGlsb3RraXQsIG5leHQuanMsIGFuZCBvcGVuYWkgZ3B0NC8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC11aS9kaXN0L2luZGV4LmNzcz9kODVjIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNWRmZGE0NzE5YWVhXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-ui/dist/index.css\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   customRandom: () => (/* binding */ customRandom),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   urlAlphabet: () => (/* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-alphabet/index.js */ \"(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/url-alphabet/index.js\");\n\n\n\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool, poolOffset;\nlet fillPool = (bytes)=>{\n    if (!pool || pool.length < bytes) {\n        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(pool);\n        poolOffset = 0;\n    } else if (poolOffset + bytes > pool.length) {\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(pool);\n        poolOffset = 0;\n    }\n    poolOffset += bytes;\n};\nlet random = (bytes)=>{\n    fillPool(bytes -= 0);\n    return pool.subarray(poolOffset - bytes, poolOffset);\n};\nlet customRandom = (alphabet, defaultSize, getRandom)=>{\n    let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;\n    let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);\n    return (size = defaultSize)=>{\n        let id = \"\";\n        while(true){\n            let bytes = getRandom(step);\n            let i = step;\n            while(i--){\n                id += alphabet[bytes[i] & mask] || \"\";\n                if (id.length === size) return id;\n            }\n        }\n    };\n};\nlet customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size, random);\nlet nanoid = (size = 21)=>{\n    fillPool(size -= 0);\n    let id = \"\";\n    for(let i = poolOffset - size; i < poolOffset; i++){\n        id += _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet[pool[i] & 63];\n    }\n    return id;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBdUM7QUFDYztBQUMvQjtBQUN0QixNQUFNRSx1QkFBdUI7QUFDN0IsSUFBSUMsTUFBTUM7QUFDVixJQUFJQyxXQUFXQyxDQUFBQTtJQUNiLElBQUksQ0FBQ0gsUUFBUUEsS0FBS0ksTUFBTSxHQUFHRCxPQUFPO1FBQ2hDSCxPQUFPSyxPQUFPQyxXQUFXLENBQUNILFFBQVFKO1FBQ2xDRixzREFBY0EsQ0FBQ0c7UUFDZkMsYUFBYTtJQUNmLE9BQU8sSUFBSUEsYUFBYUUsUUFBUUgsS0FBS0ksTUFBTSxFQUFFO1FBQzNDUCxzREFBY0EsQ0FBQ0c7UUFDZkMsYUFBYTtJQUNmO0lBQ0FBLGNBQWNFO0FBQ2hCO0FBQ08sSUFBSUksU0FBU0osQ0FBQUE7SUFDbEJELFNBQVVDLFNBQVM7SUFDbkIsT0FBT0gsS0FBS1EsUUFBUSxDQUFDUCxhQUFhRSxPQUFPRjtBQUMzQyxFQUFDO0FBQ00sSUFBSVEsZUFBZSxDQUFDQyxVQUFVQyxhQUFhQztJQUNoRCxJQUFJQyxPQUFPLENBQUMsS0FBTSxLQUFLQyxLQUFLQyxLQUFLLENBQUMsU0FBVVgsTUFBTSxHQUFHLElBQUssRUFBRSxJQUFLO0lBQ2pFLElBQUlZLE9BQU9GLEtBQUtHLElBQUksQ0FBQyxNQUFPSixPQUFPRixjQUFlRCxTQUFTTixNQUFNO0lBQ2pFLE9BQU8sQ0FBQ2MsT0FBT1AsV0FBVztRQUN4QixJQUFJUSxLQUFLO1FBQ1QsTUFBTyxLQUFNO1lBQ1gsSUFBSWhCLFFBQVFTLFVBQVVJO1lBQ3RCLElBQUlJLElBQUlKO1lBQ1IsTUFBT0ksSUFBSztnQkFDVkQsTUFBTVQsUUFBUSxDQUFDUCxLQUFLLENBQUNpQixFQUFFLEdBQUdQLEtBQUssSUFBSTtnQkFDbkMsSUFBSU0sR0FBR2YsTUFBTSxLQUFLYyxNQUFNLE9BQU9DO1lBQ2pDO1FBQ0Y7SUFDRjtBQUNGLEVBQUM7QUFDTSxJQUFJRSxpQkFBaUIsQ0FBQ1gsVUFBVVEsT0FBTyxFQUFFLEdBQzlDVCxhQUFhQyxVQUFVUSxNQUFNWCxRQUFPO0FBQy9CLElBQUllLFNBQVMsQ0FBQ0osT0FBTyxFQUFFO0lBQzVCaEIsU0FBVWdCLFFBQVE7SUFDbEIsSUFBSUMsS0FBSztJQUNULElBQUssSUFBSUMsSUFBSW5CLGFBQWFpQixNQUFNRSxJQUFJbkIsWUFBWW1CLElBQUs7UUFDbkRELE1BQU1yQiwrREFBVyxDQUFDRSxJQUFJLENBQUNvQixFQUFFLEdBQUcsR0FBRztJQUNqQztJQUNBLE9BQU9EO0FBQ1QsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL3YwIGNsb25lIHdpdGggY29waWxvdGtpdCwgbmV4dC5qcywgYW5kIG9wZW5haSBncHQ0Ly4vbm9kZV9tb2R1bGVzL0Bjb3BpbG90a2l0L3JlYWN0LWNvcmUvbm9kZV9tb2R1bGVzL25hbm9pZC9pbmRleC5qcz80MmRiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJhbmRvbUZpbGxTeW5jIH0gZnJvbSAnY3J5cHRvJ1xuaW1wb3J0IHsgdXJsQWxwaGFiZXQgfSBmcm9tICcuL3VybC1hbHBoYWJldC9pbmRleC5qcydcbmV4cG9ydCB7IHVybEFscGhhYmV0IH1cbmNvbnN0IFBPT0xfU0laRV9NVUxUSVBMSUVSID0gMTI4XG5sZXQgcG9vbCwgcG9vbE9mZnNldFxubGV0IGZpbGxQb29sID0gYnl0ZXMgPT4ge1xuICBpZiAoIXBvb2wgfHwgcG9vbC5sZW5ndGggPCBieXRlcykge1xuICAgIHBvb2wgPSBCdWZmZXIuYWxsb2NVbnNhZmUoYnl0ZXMgKiBQT09MX1NJWkVfTVVMVElQTElFUilcbiAgICByYW5kb21GaWxsU3luYyhwb29sKVxuICAgIHBvb2xPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAocG9vbE9mZnNldCArIGJ5dGVzID4gcG9vbC5sZW5ndGgpIHtcbiAgICByYW5kb21GaWxsU3luYyhwb29sKVxuICAgIHBvb2xPZmZzZXQgPSAwXG4gIH1cbiAgcG9vbE9mZnNldCArPSBieXRlc1xufVxuZXhwb3J0IGxldCByYW5kb20gPSBieXRlcyA9PiB7XG4gIGZpbGxQb29sKChieXRlcyAtPSAwKSlcbiAgcmV0dXJuIHBvb2wuc3ViYXJyYXkocG9vbE9mZnNldCAtIGJ5dGVzLCBwb29sT2Zmc2V0KVxufVxuZXhwb3J0IGxldCBjdXN0b21SYW5kb20gPSAoYWxwaGFiZXQsIGRlZmF1bHRTaXplLCBnZXRSYW5kb20pID0+IHtcbiAgbGV0IG1hc2sgPSAoMiA8PCAoMzEgLSBNYXRoLmNsejMyKChhbHBoYWJldC5sZW5ndGggLSAxKSB8IDEpKSkgLSAxXG4gIGxldCBzdGVwID0gTWF0aC5jZWlsKCgxLjYgKiBtYXNrICogZGVmYXVsdFNpemUpIC8gYWxwaGFiZXQubGVuZ3RoKVxuICByZXR1cm4gKHNpemUgPSBkZWZhdWx0U2l6ZSkgPT4ge1xuICAgIGxldCBpZCA9ICcnXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCBieXRlcyA9IGdldFJhbmRvbShzdGVwKVxuICAgICAgbGV0IGkgPSBzdGVwXG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGlkICs9IGFscGhhYmV0W2J5dGVzW2ldICYgbWFza10gfHwgJydcbiAgICAgICAgaWYgKGlkLmxlbmd0aCA9PT0gc2l6ZSkgcmV0dXJuIGlkXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5leHBvcnQgbGV0IGN1c3RvbUFscGhhYmV0ID0gKGFscGhhYmV0LCBzaXplID0gMjEpID0+XG4gIGN1c3RvbVJhbmRvbShhbHBoYWJldCwgc2l6ZSwgcmFuZG9tKVxuZXhwb3J0IGxldCBuYW5vaWQgPSAoc2l6ZSA9IDIxKSA9PiB7XG4gIGZpbGxQb29sKChzaXplIC09IDApKVxuICBsZXQgaWQgPSAnJ1xuICBmb3IgKGxldCBpID0gcG9vbE9mZnNldCAtIHNpemU7IGkgPCBwb29sT2Zmc2V0OyBpKyspIHtcbiAgICBpZCArPSB1cmxBbHBoYWJldFtwb29sW2ldICYgNjNdXG4gIH1cbiAgcmV0dXJuIGlkXG59XG4iXSwibmFtZXMiOlsicmFuZG9tRmlsbFN5bmMiLCJ1cmxBbHBoYWJldCIsIlBPT0xfU0laRV9NVUxUSVBMSUVSIiwicG9vbCIsInBvb2xPZmZzZXQiLCJmaWxsUG9vbCIsImJ5dGVzIiwibGVuZ3RoIiwiQnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJyYW5kb20iLCJzdWJhcnJheSIsImN1c3RvbVJhbmRvbSIsImFscGhhYmV0IiwiZGVmYXVsdFNpemUiLCJnZXRSYW5kb20iLCJtYXNrIiwiTWF0aCIsImNsejMyIiwic3RlcCIsImNlaWwiLCJzaXplIiwiaWQiLCJpIiwiY3VzdG9tQWxwaGFiZXQiLCJuYW5vaWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/url-alphabet/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@copilotkit/react-core/node_modules/nanoid/url-alphabet/index.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAlphabet: () => (/* binding */ urlAlphabet)\n/* harmony export */ });\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtY29yZS9ub2RlX21vZHVsZXMvbmFub2lkL3VybC1hbHBoYWJldC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsY0FDWCxtRUFBa0UiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92MCBjbG9uZSB3aXRoIGNvcGlsb3RraXQsIG5leHQuanMsIGFuZCBvcGVuYWkgZ3B0NC8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC1jb3JlL25vZGVfbW9kdWxlcy9uYW5vaWQvdXJsLWFscGhhYmV0L2luZGV4LmpzPzEwOGIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHVybEFscGhhYmV0ID1cbiAgJ3VzZWFuZG9tLTI2VDE5ODM0MFBYNzVweEpBQ0tWRVJZTUlOREJVU0hXT0xGX0dRWmJmZ2hqa2xxdnd5enJpY3QnXG4iXSwibmFtZXMiOlsidXJsQWxwaGFiZXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-core/node_modules/nanoid/url-alphabet/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@copilotkit/react-ui/node_modules/nanoid/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   customAlphabet: () => (/* binding */ customAlphabet),\n/* harmony export */   customRandom: () => (/* binding */ customRandom),\n/* harmony export */   nanoid: () => (/* binding */ nanoid),\n/* harmony export */   random: () => (/* binding */ random),\n/* harmony export */   urlAlphabet: () => (/* reexport safe */ _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./url-alphabet/index.js */ \"(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/url-alphabet/index.js\");\n\n\n\nconst POOL_SIZE_MULTIPLIER = 128;\nlet pool, poolOffset;\nlet fillPool = (bytes)=>{\n    if (!pool || pool.length < bytes) {\n        pool = Buffer.allocUnsafe(bytes * POOL_SIZE_MULTIPLIER);\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(pool);\n        poolOffset = 0;\n    } else if (poolOffset + bytes > pool.length) {\n        (0,crypto__WEBPACK_IMPORTED_MODULE_0__.randomFillSync)(pool);\n        poolOffset = 0;\n    }\n    poolOffset += bytes;\n};\nlet random = (bytes)=>{\n    fillPool(bytes -= 0);\n    return pool.subarray(poolOffset - bytes, poolOffset);\n};\nlet customRandom = (alphabet, defaultSize, getRandom)=>{\n    let mask = (2 << 31 - Math.clz32(alphabet.length - 1 | 1)) - 1;\n    let step = Math.ceil(1.6 * mask * defaultSize / alphabet.length);\n    return (size = defaultSize)=>{\n        let id = \"\";\n        while(true){\n            let bytes = getRandom(step);\n            let i = step;\n            while(i--){\n                id += alphabet[bytes[i] & mask] || \"\";\n                if (id.length === size) return id;\n            }\n        }\n    };\n};\nlet customAlphabet = (alphabet, size = 21)=>customRandom(alphabet, size, random);\nlet nanoid = (size = 21)=>{\n    fillPool(size -= 0);\n    let id = \"\";\n    for(let i = poolOffset - size; i < poolOffset; i++){\n        id += _url_alphabet_index_js__WEBPACK_IMPORTED_MODULE_1__.urlAlphabet[pool[i] & 63];\n    }\n    return id;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtdWkvbm9kZV9tb2R1bGVzL25hbm9pZC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXVDO0FBQ2M7QUFDL0I7QUFDdEIsTUFBTUUsdUJBQXVCO0FBQzdCLElBQUlDLE1BQU1DO0FBQ1YsSUFBSUMsV0FBV0MsQ0FBQUE7SUFDYixJQUFJLENBQUNILFFBQVFBLEtBQUtJLE1BQU0sR0FBR0QsT0FBTztRQUNoQ0gsT0FBT0ssT0FBT0MsV0FBVyxDQUFDSCxRQUFRSjtRQUNsQ0Ysc0RBQWNBLENBQUNHO1FBQ2ZDLGFBQWE7SUFDZixPQUFPLElBQUlBLGFBQWFFLFFBQVFILEtBQUtJLE1BQU0sRUFBRTtRQUMzQ1Asc0RBQWNBLENBQUNHO1FBQ2ZDLGFBQWE7SUFDZjtJQUNBQSxjQUFjRTtBQUNoQjtBQUNPLElBQUlJLFNBQVNKLENBQUFBO0lBQ2xCRCxTQUFVQyxTQUFTO0lBQ25CLE9BQU9ILEtBQUtRLFFBQVEsQ0FBQ1AsYUFBYUUsT0FBT0Y7QUFDM0MsRUFBQztBQUNNLElBQUlRLGVBQWUsQ0FBQ0MsVUFBVUMsYUFBYUM7SUFDaEQsSUFBSUMsT0FBTyxDQUFDLEtBQU0sS0FBS0MsS0FBS0MsS0FBSyxDQUFDLFNBQVVYLE1BQU0sR0FBRyxJQUFLLEVBQUUsSUFBSztJQUNqRSxJQUFJWSxPQUFPRixLQUFLRyxJQUFJLENBQUMsTUFBT0osT0FBT0YsY0FBZUQsU0FBU04sTUFBTTtJQUNqRSxPQUFPLENBQUNjLE9BQU9QLFdBQVc7UUFDeEIsSUFBSVEsS0FBSztRQUNULE1BQU8sS0FBTTtZQUNYLElBQUloQixRQUFRUyxVQUFVSTtZQUN0QixJQUFJSSxJQUFJSjtZQUNSLE1BQU9JLElBQUs7Z0JBQ1ZELE1BQU1ULFFBQVEsQ0FBQ1AsS0FBSyxDQUFDaUIsRUFBRSxHQUFHUCxLQUFLLElBQUk7Z0JBQ25DLElBQUlNLEdBQUdmLE1BQU0sS0FBS2MsTUFBTSxPQUFPQztZQUNqQztRQUNGO0lBQ0Y7QUFDRixFQUFDO0FBQ00sSUFBSUUsaUJBQWlCLENBQUNYLFVBQVVRLE9BQU8sRUFBRSxHQUM5Q1QsYUFBYUMsVUFBVVEsTUFBTVgsUUFBTztBQUMvQixJQUFJZSxTQUFTLENBQUNKLE9BQU8sRUFBRTtJQUM1QmhCLFNBQVVnQixRQUFRO0lBQ2xCLElBQUlDLEtBQUs7SUFDVCxJQUFLLElBQUlDLElBQUluQixhQUFhaUIsTUFBTUUsSUFBSW5CLFlBQVltQixJQUFLO1FBQ25ERCxNQUFNckIsK0RBQVcsQ0FBQ0UsSUFBSSxDQUFDb0IsRUFBRSxHQUFHLEdBQUc7SUFDakM7SUFDQSxPQUFPRDtBQUNULEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92MCBjbG9uZSB3aXRoIGNvcGlsb3RraXQsIG5leHQuanMsIGFuZCBvcGVuYWkgZ3B0NC8uL25vZGVfbW9kdWxlcy9AY29waWxvdGtpdC9yZWFjdC11aS9ub2RlX21vZHVsZXMvbmFub2lkL2luZGV4LmpzPzljYzkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcmFuZG9tRmlsbFN5bmMgfSBmcm9tICdjcnlwdG8nXG5pbXBvcnQgeyB1cmxBbHBoYWJldCB9IGZyb20gJy4vdXJsLWFscGhhYmV0L2luZGV4LmpzJ1xuZXhwb3J0IHsgdXJsQWxwaGFiZXQgfVxuY29uc3QgUE9PTF9TSVpFX01VTFRJUExJRVIgPSAxMjhcbmxldCBwb29sLCBwb29sT2Zmc2V0XG5sZXQgZmlsbFBvb2wgPSBieXRlcyA9PiB7XG4gIGlmICghcG9vbCB8fCBwb29sLmxlbmd0aCA8IGJ5dGVzKSB7XG4gICAgcG9vbCA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShieXRlcyAqIFBPT0xfU0laRV9NVUxUSVBMSUVSKVxuICAgIHJhbmRvbUZpbGxTeW5jKHBvb2wpXG4gICAgcG9vbE9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChwb29sT2Zmc2V0ICsgYnl0ZXMgPiBwb29sLmxlbmd0aCkge1xuICAgIHJhbmRvbUZpbGxTeW5jKHBvb2wpXG4gICAgcG9vbE9mZnNldCA9IDBcbiAgfVxuICBwb29sT2Zmc2V0ICs9IGJ5dGVzXG59XG5leHBvcnQgbGV0IHJhbmRvbSA9IGJ5dGVzID0+IHtcbiAgZmlsbFBvb2woKGJ5dGVzIC09IDApKVxuICByZXR1cm4gcG9vbC5zdWJhcnJheShwb29sT2Zmc2V0IC0gYnl0ZXMsIHBvb2xPZmZzZXQpXG59XG5leHBvcnQgbGV0IGN1c3RvbVJhbmRvbSA9IChhbHBoYWJldCwgZGVmYXVsdFNpemUsIGdldFJhbmRvbSkgPT4ge1xuICBsZXQgbWFzayA9ICgyIDw8ICgzMSAtIE1hdGguY2x6MzIoKGFscGhhYmV0Lmxlbmd0aCAtIDEpIHwgMSkpKSAtIDFcbiAgbGV0IHN0ZXAgPSBNYXRoLmNlaWwoKDEuNiAqIG1hc2sgKiBkZWZhdWx0U2l6ZSkgLyBhbHBoYWJldC5sZW5ndGgpXG4gIHJldHVybiAoc2l6ZSA9IGRlZmF1bHRTaXplKSA9PiB7XG4gICAgbGV0IGlkID0gJydcbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgbGV0IGJ5dGVzID0gZ2V0UmFuZG9tKHN0ZXApXG4gICAgICBsZXQgaSA9IHN0ZXBcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgaWQgKz0gYWxwaGFiZXRbYnl0ZXNbaV0gJiBtYXNrXSB8fCAnJ1xuICAgICAgICBpZiAoaWQubGVuZ3RoID09PSBzaXplKSByZXR1cm4gaWRcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBsZXQgY3VzdG9tQWxwaGFiZXQgPSAoYWxwaGFiZXQsIHNpemUgPSAyMSkgPT5cbiAgY3VzdG9tUmFuZG9tKGFscGhhYmV0LCBzaXplLCByYW5kb20pXG5leHBvcnQgbGV0IG5hbm9pZCA9IChzaXplID0gMjEpID0+IHtcbiAgZmlsbFBvb2woKHNpemUgLT0gMCkpXG4gIGxldCBpZCA9ICcnXG4gIGZvciAobGV0IGkgPSBwb29sT2Zmc2V0IC0gc2l6ZTsgaSA8IHBvb2xPZmZzZXQ7IGkrKykge1xuICAgIGlkICs9IHVybEFscGhhYmV0W3Bvb2xbaV0gJiA2M11cbiAgfVxuICByZXR1cm4gaWRcbn1cbiJdLCJuYW1lcyI6WyJyYW5kb21GaWxsU3luYyIsInVybEFscGhhYmV0IiwiUE9PTF9TSVpFX01VTFRJUExJRVIiLCJwb29sIiwicG9vbE9mZnNldCIsImZpbGxQb29sIiwiYnl0ZXMiLCJsZW5ndGgiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsInJhbmRvbSIsInN1YmFycmF5IiwiY3VzdG9tUmFuZG9tIiwiYWxwaGFiZXQiLCJkZWZhdWx0U2l6ZSIsImdldFJhbmRvbSIsIm1hc2siLCJNYXRoIiwiY2x6MzIiLCJzdGVwIiwiY2VpbCIsInNpemUiLCJpZCIsImkiLCJjdXN0b21BbHBoYWJldCIsIm5hbm9pZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/url-alphabet/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@copilotkit/react-ui/node_modules/nanoid/url-alphabet/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   urlAlphabet: () => (/* binding */ urlAlphabet)\n/* harmony export */ });\nconst urlAlphabet = \"useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtdWkvbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLGNBQ1gsbUVBQWtFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdjAgY2xvbmUgd2l0aCBjb3BpbG90a2l0LCBuZXh0LmpzLCBhbmQgb3BlbmFpIGdwdDQvLi9ub2RlX21vZHVsZXMvQGNvcGlsb3RraXQvcmVhY3QtdWkvbm9kZV9tb2R1bGVzL25hbm9pZC91cmwtYWxwaGFiZXQvaW5kZXguanM/YWJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdXJsQWxwaGFiZXQgPVxuICAndXNlYW5kb20tMjZUMTk4MzQwUFg3NXB4SkFDS1ZFUllNSU5EQlVTSFdPTEZfR1FaYmZnaGprbHF2d3l6cmljdCdcbiJdLCJuYW1lcyI6WyJ1cmxBbHBoYWJldCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@copilotkit/react-ui/node_modules/nanoid/url-alphabet/index.js\n");

/***/ })

};
;